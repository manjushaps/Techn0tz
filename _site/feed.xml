<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://manjushaps.github.io/Techn0tz/feed.xml" rel="self" type="application/atom+xml" /><link href="https://manjushaps.github.io/Techn0tz/" rel="alternate" type="text/html" /><updated>2025-06-06T17:33:47+05:30</updated><id>https://manjushaps.github.io/Techn0tz/feed.xml</id><title type="html">Techn0tz</title><subtitle>Empowering self-learners through clean, beginner-friendly tutorials on Git, Jekyll, and more.</subtitle><author><name>Manjushaps</name></author><entry><title type="html">Book Series - Meditations: Book One</title><link href="https://manjushaps.github.io/Techn0tz/book/2025/06/06/Book-Series-Book-1.html" rel="alternate" type="text/html" title="Book Series - Meditations: Book One" /><published>2025-06-06T00:00:00+05:30</published><updated>2025-06-06T00:00:00+05:30</updated><id>https://manjushaps.github.io/Techn0tz/book/2025/06/06/Book-Series-Book-1</id><content type="html" xml:base="https://manjushaps.github.io/Techn0tz/book/2025/06/06/Book-Series-Book-1.html"><![CDATA[<h1 id="introduction">üìÉIntroduction</h1>

<blockquote>
  <p><strong><em>What if the most powerful man in the world began his personal journal by thanking the people who shaped his character?</em></strong></p>

  <p>That‚Äôs exactly what Marcus Aurelius did in <strong>Book One of Meditations</strong>. Long before offering reflections on self-mastery or fate, he began with gratitude ‚Äî honoring family, mentors, and teachers who helped form his values.</p>
</blockquote>

<p><strong>Marcus Annius Verus</strong> was born in 121 A.D. into a prominent Roman family. Later adopted by Emperor Antoninus Pius, he became <strong>Marcus Aurelius Antoninus</strong>, ruler of Rome from 161 to 180 A.D., and is remembered as one of history‚Äôs most respected philosopher-kings.</p>

<p><strong>Meditations</strong> is a collection of his private reflections ‚Äî written originally in Greek ‚Äî where he explores character, duty, and inner peace through the lens of Stoic philosophy. This summary is based on the <strong>George Long translation</strong> (public domain), which preserves the clarity and sincerity of Marcus‚Äôs thoughts, though in a classical tone.</p>

<p><strong>Book One of Meditations</strong> opens not with philosophical arguments, but with deeply personal expressions of <strong>gratitude</strong> ‚Äî to those who influenced his moral character. From his grandfather and mother to tutors, friends, and his adoptive father, he reflects on the virtues each person instilled in him.</p>

<blockquote>
  <p>What follows is a clear and simple summary of Book One ‚Äî a short but powerful reflection on character, influence, and gratitude.</p>
</blockquote>

<hr />

<h2 id="-people-who-shaped-marcus---and-what-he-learned">üôè People Who Shaped Marcus - and What he Learned</h2>
<h3 id="from-my-grandfather-verus">From my grandfather Verus</h3>
<blockquote>
  <p><strong><em>From my grandfather Verus I learned good morals and government of my temper.</em></strong></p>
</blockquote>

<p>Marcus thanks his grandfather for teaching him self-restraint and the importance of character ‚Äî a foundation for the Stoic calm he would later practice.</p>

<h3 id="from-my-father-by-memory">From my father (by memory)</h3>
<blockquote>
  <p><strong><em>From reputation and remembrance of my father, modesty and a manly character.</em></strong></p>
</blockquote>

<p>Though Marcus lost his father, <strong>Annius Verus</strong>, early in life, he remembered him as a man of quiet strength and modesty ‚Äî a memory that helped shape his own ideal of manhood.</p>

<h3 id="from-my-mother-domitia-calvilla">From my mother Domitia Calvilla</h3>
<blockquote>
  <p><strong><em>From my mother, piety and beneficence, and abstinence not only from evil deeds, but even from evil thoughts.</em></strong></p>
</blockquote>

<p>He praises her for her generosity, simplicity, and inner purity ‚Äî values that grounded Marcus amid the distractions of public life.</p>

<h3 id="from-my-great-grandfather">From my great-grandfather</h3>
<blockquote>
  <p><strong><em>From my great-grandfather, to avoid the public schools, and to enjoy good teachers at home.</em></strong></p>
</blockquote>

<p>Marcus appreciated his great-grandfather‚Äôs decision to give him a private, thoughtful education, away from the distractions of public schooling ‚Äî a foundation for his lifelong learning.</p>

<h3 id="from-my-governor">From my governor</h3>
<blockquote>
  <p><strong><em>From my governor, to be neither of the green nor of the blue at the games‚Ä¶not to meddle with people‚Äôs affairs, and not to be ready to listen to slander.</em></strong></p>
</blockquote>

<p>Marcus admired his governor‚Äôs self-discipline. From him, he learned to avoid distractions, stay neutral in public spectacles, and value hard work over indulgence.</p>

<h3 id="from-my-tutor-rusticus">From my tutor Rusticus</h3>
<blockquote>
  <p><strong><em>From Rusticus, I learned not to be astray to sophistic emulation, nor to writing on speculative matters‚Ä¶..or does benevolent acts in order to make a display.</em></strong></p>
</blockquote>

<p>Rusticus reminded Marcus that true philosophy is not for show, but for life. He taught him to look beyond flattery and stay grounded in truth.</p>

<h3 id="from-my-tutor-sextus">From my tutor Sextus</h3>
<blockquote>
  <p><strong><em>From Sextus, a benevolent disposition, and the example of a family governed in a fatherly manner, and the idea of living conformably to nature.</em></strong></p>
</blockquote>

<p>Sextus taught Marcus tolerance, calm strength, and the importance of fulfilling public duties with warmth and sincerity. He was a living example of someone who governed both family and self with fatherly care.</p>

<h3 id="from-fronto-my-teacher">From Fronto, my teacher</h3>
<blockquote>
  <p><strong><em>From Fronto I learned to observe what envy, and duplicity, and hypocrisy are in a tyrant, and that generally those among us who are called Patricians are somewhat lacking in parental affection.</em></strong></p>
</blockquote>

<p>Marcus learned the art of effective communication and how not to interrupt or correct others in a rude way. Fronto also made him aware of the dangers of pride and the masks powerful people often wear.</p>

<h3 id="from-catulus-my-friend">From Catulus, my friend</h3>
<blockquote>
  <p><strong><em>From Catulus, not to be indifferent when a friend finds fault, even if unjustly, but to try to restore him to his usual disposition; to speak well of teachers, as it is the duty of a father to his children.</em></strong></p>
</blockquote>

<p>Catulus taught him to handle criticism with grace and to speak respectfully of one‚Äôs teachers ‚Äî a lesson in humility and gentleness in relationships.</p>

<h3 id="from-my-brother-severus">From my brother Severus</h3>
<blockquote>
  <p><strong><em>From Severus, love of family, love of truth, and love of justice.</em></strong></p>
</blockquote>

<p>From Severus, Marcus learned the value of loyalty, truthfulness, and justice ‚Äî principles that shaped his approach to leadership and helped him maintain steadiness in his Stoic beliefs.</p>

<h3 id="from-my-adoptive-father-antoninus-pius">From my adoptive father Antoninus Pius</h3>
<blockquote>
  <p><strong><em>From my father, I learned gentleness‚Ä¶ firmness in purpose‚Ä¶ indifference to empty fame‚Ä¶ a just temper and a forgiving nature.</em></strong></p>
</blockquote>

<p>Marcus deeply admired his adoptive father‚Äôs virtues ‚Äî gentleness, humility, the courage to admit mistakes, and the ability to treat everyone with fairness and warmth, regardless of status. Even after Antoninus‚Äôs death, Marcus looked to his memory for guidance, especially in fulfilling his duties as emperor.</p>

<h3 id="to-the-gods">To the gods</h3>
<blockquote>
  <p><strong><em>It is to the gods that I owe having good grandfathers, good parents, a good sister, good teachers, good servants, good kinsmen and friends‚Ä¶</em></strong></p>
</blockquote>

<p>In his final thanks, Marcus acknowledges the gods for blessing him with good people and a life shaped by virtue. Even with emperor-like power, he bows in humility before fate and fortune ‚Äî recognizing that much of what made him good was not earned, but given.</p>

<h3 id="from-other-mentors-and-friends">From other mentors and friends</h3>
<ul>
  <li><strong>Diognetus</strong> - Avoid distractions and think independently.</li>
  <li><strong>Apollonius</strong> - Taught the value of liberty and how to remain calm and composed in the face of loss.</li>
  <li><strong>Alexander the grammarian</strong> - Showed patience and kindness; taught that it‚Äôs better to lead by example than to reproach others.</li>
  <li><strong>Maximus</strong> - Demonstrated self-governance and how to live with dignity, grace, and joy.</li>
  <li><strong>Alexander the Platonic</strong> - Emphasized that living wisely is more important than merely talking wisely.</li>
</ul>

<hr />

<h1 id="conclusion-a-life-built-on-gratitude">Conclusion: A Life Built on Gratitude</h1>
<p>Before offering Stoic insights on life and leadership, Marcus Aurelius begins with something quietly powerful: <strong>gratitude</strong>.</p>

<p>In Book One of Meditations, we meet not just an emperor, but a man shaped by others. Each name he mentions is a reminder that character is not built alone ‚Äî it‚Äôs formed through family, mentors, and friends.</p>

<blockquote>
  <p><strong><em>‚ÄúTo have read carefully and not to have been satisfied with a superficial understanding ‚Äî from Rusticus.‚Äù</em></strong></p>
</blockquote>

<p>Marcus doesn‚Äôt start with abstract philosophy ‚Äî he starts with people. These personal notes reveal the heart of Stoicism: <strong>strength shaped by example, and wisdom rooted in humility</strong>.</p>

<p>No matter who we are, we all owe something to those who came before us. Gratitude, Marcus shows us, is not a soft sentiment ‚Äî it‚Äôs where true growth begins.</p>

<hr />

<h2 id="your-turn----who-would-be-in-your-book-one">Your Turn -  Who Would Be in Your Book One?</h2>
<blockquote>
  <p>Try your own version of Book One.</p>
  <blockquote>
    <p>‚ùì <strong>Who are the people who shaped your thinking, values, and actions? What did they teach you ‚Äî through words or quiet example?</strong></p>

    <p>‚ùì <strong>What would your gratitude journal look like? Marcus began his with 17 names.</strong></p>
  </blockquote>
</blockquote>

<!--![Gratitude_Journal](/Techn0tz/assets/images/Book_one_post.png)-->
<p><img src="/Techn0tz/assets/images/Book_one_post.png" alt="Journal" width="600" height="auto" /></p>

<p>üí≠<em>Feel free to share your thoughts in the comments, or write your own gratitude list.</em></p>

<p>And if this post resonated with you, <strong>stay tuned for Book Two</strong>, where Marcus begins to reflect on daily discipline, mortality, and inner peace ‚Äî one journal entry at a time.</p>]]></content><author><name>Manjushaps</name></author><category term="Book" /><summary type="html"><![CDATA[üìÉIntroduction]]></summary></entry><entry><title type="html">Jekyll Series: Part 4 - LiveBlog: A Practical Example</title><link href="https://manjushaps.github.io/Techn0tz/jekyll/2025/05/29/Jekyll-Series-Part-4.html" rel="alternate" type="text/html" title="Jekyll Series: Part 4 - LiveBlog: A Practical Example" /><published>2025-05-29T00:00:00+05:30</published><updated>2025-05-29T00:00:00+05:30</updated><id>https://manjushaps.github.io/Techn0tz/jekyll/2025/05/29/Jekyll-Series-Part-4</id><content type="html" xml:base="https://manjushaps.github.io/Techn0tz/jekyll/2025/05/29/Jekyll-Series-Part-4.html"><![CDATA[<h1 id="-introduction">üìÉ Introduction</h1>
<p>Welcome to <strong>Part 4 of the Jekyll Series</strong> on <strong>Techn0tz!!</strong>.</p>

<p>In the previous parts, we explored Git, GitHub, installing Jekyll on Windows, building and previewing a site locally, and pushing it to GitHub Pages. Now, it‚Äôs time to put that knowledge into practice by creating a real-world project ‚Äî a fully functional blog named <strong>LiveBlog</strong>, powered by Jekyll and deployed using GitHub Pages.</p>

<p>This step-by-step guide will walk you through everything from creating the site to customizing content, previewing locally, using Git for version control, and deploying it live. By the end, you‚Äôll have your own blog online ‚Äî and a solid understanding of the full Jekyll workflow.</p>

<hr />

<h1 id="-project-overview">üìÑ Project Overview</h1>
<h2 id="objective">Objective</h2>
<p>To build a working static blog using <strong>Jekyll(with the Minima theme)</strong> and deploy it publicly using GitHub Pages. We will build and customize a new site called <strong>LiveBlog</strong>, track its changes using Git, and publish it to the web ‚Äî for free.</p>

<h2 id="tools-and-technologies">Tools and Technologies</h2>

<table>
  <thead>
    <tr>
      <th><strong>Tool</strong></th>
      <th><strong>Purpose</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Jekyll</td>
      <td>Static site generator</td>
    </tr>
    <tr>
      <td>Minima Theme</td>
      <td>Clean, minimal blog layout (default)</td>
    </tr>
    <tr>
      <td>Git</td>
      <td>Version control for tracking changes</td>
    </tr>
    <tr>
      <td>GitHub</td>
      <td>Hosting the blog via GitHub Pages</td>
    </tr>
    <tr>
      <td>Bundler</td>
      <td>Manages Ruby and Jekyll dependencies</td>
    </tr>
    <tr>
      <td>VS Code</td>
      <td>Code editor (optional but recommended)</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p><strong>Tip: If you‚Äôre unfamiliar with the commands or setup steps used in this post (like <code class="language-plaintext highlighter-rouge">jekyll new</code>, <code class="language-plaintext highlighter-rouge">bundle install</code>, or <code class="language-plaintext highlighter-rouge">git init</code>), check out <a href="/Techn0tz/jekyll/2025/05/09/Jekyll-Series-Part-1">Jekyll Series: Part-1</a> and <a href="/Techn0tz/jekyll/2025/05/15/Jekyll-Series-Part-2">Part-2</a> for a detailed walkthrough</strong></p>
</blockquote>

<hr />

<h1 id="-step-by-step-workflow">üìù Step-by-Step WorkFlow</h1>
<h2 id="-step-1-setup-jekyll-project-with-git-integration">üåê Step 1: Setup Jekyll project with Git Integration</h2>
<ul>
  <li>Run the following commands to create and open a new Jekyll site:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll new liveblog
cd liveblog
git init
code .
</code></pre></div>    </div>
  </li>
  <li>
    <p><em>Screenshot</em> - Git Bash Terminal after site creation and git init 
<img src="/Techn0tz/assets/images/create_site_post4.png" alt="site_post4" width="600" height="auto" /></p>
  </li>
  <li><em>Screenshot</em> - Project opened in VS code
<img src="/Techn0tz/assets/images/liveblog_VS.png" alt="liveblog_VS" width="600" height="auto" /></li>
</ul>

<h2 id="-step-2-configure-_configyml">üåê Step 2: Configure <strong>_config.yml</strong></h2>
<ul>
  <li>Replace the existing contents of <strong>_config.yml</strong> file
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>title: Liveblog
remote-theme: jekyll/minima
baseurl: "/liveblog"
repository: yourusername/Liveblog (optional)
</code></pre></div>    </div>
    <blockquote>
      <p><strong>Note: The repository key helps GitHub Pages generate site metadata correctly.</strong></p>
    </blockquote>
  </li>
  <li><em>Screenshot</em> - Update <strong>_config.yml</strong>
<!--<img src="/Techn0tz/assets/images/update_config.png" alt="config" width="600" height="auto">-->
<a href="/Techn0tz/assets/images/update_config.png" target="_blank">
<img src="/Techn0tz/assets/images/update_config.png" alt="post" width="600" height="auto" /> 
</a></li>
</ul>
<p style="text-align: center;"><em>Click the image to view full size</em></p>

<h2 id="-step-3-customize-indexmd">üåê Step 3: Customize <strong>index.md</strong></h2>
<ul>
  <li>This file serves as your homepage. You can add a welcome message or list of recent posts.</li>
  <li>Rename the file as <strong>index.md</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>layout: default
title: Welcome
&lt;h1&gt;Welcome to Liveblog&lt;/h1&gt;
</code></pre></div></div>
<ul>
  <li>The code given below turns your homepage into a dynamic blog index. Any time you add a new post in _posts/, it automatically appears in the list ‚Äî no need to manually update index.md.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;ul&gt;
  {% for post in site.posts %}
    &lt;li&gt;
      &lt;a href="{{ site.baseurl }}{{ post.url }}"&gt;{{ post.title }}&lt;/a&gt; ‚Äî {{ post.date | date: "%B %d, %Y" }}
    &lt;/li&gt;
  {% endfor %}
&lt;/ul&gt;
</code></pre></div></div>

<ul>
  <li><em>Screenshot</em> - Customized index.md
<!--<img src="/Techn0tz/assets/images/index.md_cust.png" alt="index_cust" width="800" height="auto">-->
<a href="/Techn0tz/assets/images/index.md_cust.png" target="_blank">
<img src="/Techn0tz/assets/images/index.md_cust.png" alt="post" width="600" height="auto" /> 
</a></li>
</ul>
<p style="text-align: center;"><em>Click the image to view full size</em></p>

<h2 id="-step-4-update-gemfile">üåê Step 4: Update <strong>GemFile</strong></h2>
<ul>
  <li>In the GemFile, replace or modify contents as shown in the screenshot.</li>
  <li><em>Screenshot</em> - Updated GemFile
<img src="/Techn0tz/assets/images/update_gemfile.png" alt="gemfile" width="700" height="auto" /></li>
</ul>

<h2 id="-step-5-add-a-blog-post">üåê Step 5: Add a Blog Post</h2>
<ul>
  <li>Inside the <strong>_post</strong> folder, replace or modify existing blog post with new post <strong>(eg. 2025-05-26-Sample-post-1)</strong>.</li>
  <li>Add the post with proper front matter else the post won‚Äôt be displayed.</li>
  <li><em>Screenshot</em> - New post .md file
<!--<img src="/Techn0tz/assets/images/new_post.png" alt="post" width="900" height="auto">-->
<a href="/Techn0tz/assets/images/new_post.png" target="_blank">
<img src="/Techn0tz/assets/images/new_post.png" alt="post" width="600" height="auto" /> 
</a></li>
</ul>
<p style="text-align: center;"><em>Click the image to view full size</em></p>

<h2 id="-step-6-create-github-repository-and-connect-to-git">üåê Step 6: Create GitHub Repository and Connect to Git</h2>
<ul>
  <li>Go to GitHub, create a new repository named <strong>liveblog</strong>, and leave it empty (no README, .gitignore, or license).</li>
  <li>In your terminal, add all your files, commit the files and add the remote URL to your local Git project.</li>
  <li>
    <p><em>Screenshot</em> - GitHub repo creation
<img src="/Techn0tz/assets/images/GH_repo.png" alt="GHrepo" width="700" height="auto" /></p>
  </li>
  <li><em>Screenshot</em> - Git remote connection
<img src="/Techn0tz/assets/images/Git_connect.png" alt="Git" width="700" height="auto" /></li>
</ul>

<h2 id="-step-7-install-dependencies-and-preview-locally">üåê Step 7: Install Dependencies and Preview Locally</h2>
<ul>
  <li>In VS Code‚Äôs integrated terminal (opened inside the liveblog folder), install the required Ruby gems using the command <strong><code class="language-plaintext highlighter-rouge">bundle install</code></strong>.</li>
  <li>Then, run the Jekyll server to preview your site <strong><code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code></strong>.</li>
</ul>

<blockquote>
  <p><strong>Tip - To open VS code terminal:</strong></p>

  <p>Go to menu: <strong>View -&gt; Terminal</strong> or use the shortcut <strong>Ctrl + ~</strong>.</p>
</blockquote>

<ul>
  <li>Vist <strong>http://localhost:4000/liveblog</strong> in your browser to view yout blog.</li>
</ul>

<blockquote>
  <p><strong>Note</strong>: If port 4000 is already in use (e.g., for another Jekyll project), you can run the server on an alternate port using</p>

  <p><strong><code class="language-plaintext highlighter-rouge">bundle exec jekyll serve --port 4001</code></strong></p>

  <p>Then visit <strong>http://localhost:4001/liveblog</strong></p>
</blockquote>

<ul>
  <li><em>Screenshot</em> - VS code terminal showing local preview
<!--<img src="/Techn0tz/assets/images/local_site_post4.png" alt="localsite" width="900" height="auto">-->
<a href="/Techn0tz/assets/images/local_site_post4.png" target="_blank">
<img src="/Techn0tz/assets/images/local_site_post4.png" alt="post" width="600" height="auto" /> 
</a></li>
</ul>
<p style="text-align: center;"><em>Click the image to view full size</em></p>

<h2 id="-step-8-push-te-site-to-github">üåê Step 8: Push te Site to GitHub</h2>
<ul>
  <li>
    <p>After confirming that your site works locally, push your code to GitHub using the command <strong><code class="language-plaintext highlighter-rouge">git push -u origin</code></strong>.</p>
  </li>
  <li>
    <p><em>Screenshot</em> - Successful Git push terminal and repository folders.
<img src="/Techn0tz/assets/images/git_push_post4.png" alt="gitpush" width="600" height="auto" />
<img src="/Techn0tz/assets/images/GH_repo_folders.png" alt="GH folders" width="700" height="auto" /></p>
  </li>
</ul>

<h2 id="-step-9-enable-github-pages-and-finalize-deployment">üåê Step 9: Enable GitHub Pages and Finalize Deployment</h2>
<ul>
  <li>Go to your repository on GitHub:</li>
  <li>Settings ‚Üí Pages ‚Üí Build and Deployment</li>
  <li>Choose:
    <ul>
      <li>Source: Deploy from a branch</li>
      <li>Branch: main</li>
      <li>Folder: / (root)</li>
    </ul>
  </li>
  <li>Save to publish your blog. GitHub will display the live URL <strong>(e.g.,https://yourusername.github.io/liveblog)</strong>.</li>
  <li><em>Screenshot</em> - GitHub Pages settings page after configuration
<!--<img src="/Techn0tz/assets/images/GH_page_config.png" alt="GH config" width="600" height="auto">-->
<a href="/Techn0tz/assets/images/GH_page_config.png" target="_blank">
<img src="/Techn0tz/assets/images/GH_page_config.png" alt="post" width="600" height="auto" /> 
</a></li>
</ul>
<p style="text-align: center;"><em>Click the image to view full size</em></p>

<ul>
  <li><em>Screenshot</em> - liveblog homepage and sample post
<img src="/Techn0tz/assets/images/liveblog_homepage.png" alt="blog_home" width="700" height="auto" />
<img src="/Techn0tz/assets/images/sample_post.png" alt="samplepost" width="700" height="auto" /></li>
</ul>

<blockquote>
  <p><strong>Note on baseurl:</strong></p>

  <p>You only need to set <strong>baseurl in _config.yml</strong> if your site is hosted in a <strong>subdirectory</strong>, like <strong>https://yourusername.github.io/liveblog</strong></p>

  <p>In that case, add:</p>

  <p><strong>baseurl: ‚Äú/liveblog‚Äù</strong> And use <strong>site.baseurl</strong> when linking internal pages or assets.</p>

  <p>If your site is hosted at the root domain (e.g., with a custom domain or at <strong>https://yourusername.github.io/</strong>), leave baseurl empty:</p>

  <p><strong>baseurl: ‚Äú‚Äú</strong></p>
</blockquote>

<h2 id="-congratulations-youre-live">üéâ Congratulations! You‚Äôre Live!</h2>
<p>Your Jekyll blog is now live and running on GitHub Pages! You‚Äôve successfully gone from zero to deployed ‚Äî well done!</p>

<hr />

<h1 id="-troubleshooting-the-errors">üí≠ Troubleshooting the Errors</h1>

<table>
  <thead>
    <tr>
      <th><strong>Error Message</strong></th>
      <th><strong>Solution</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">fatal: ambiguous argument 'HEAD'</code></td>
      <td>You haven‚Äôt committed anything yet. Run <code class="language-plaintext highlighter-rouge">git commit -m "Initial commit"</code> before pushing.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Liquid Exception: No repo name found...</code></td>
      <td>Add <code class="language-plaintext highlighter-rouge">repository: yourusername/liveblog</code> to <code class="language-plaintext highlighter-rouge">_config.yml</code>.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code> fails with theme error</td>
      <td>Ensure <code class="language-plaintext highlighter-rouge">theme: minima</code> is set and you‚Äôve run <code class="language-plaintext highlighter-rouge">bundle install</code>.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Could not find gem 'github-pages'</code> or version issues</td>
      <td>Run <code class="language-plaintext highlighter-rouge">bundle update</code> or ensure correct Ruby version is used.</td>
    </tr>
    <tr>
      <td>GitHub Pages doesn‚Äôt reflect changes</td>
      <td>Ensure you pushed to the correct branch (<code class="language-plaintext highlighter-rouge">main</code>) and Pages source is set to <code class="language-plaintext highlighter-rouge">main / (root)</code>.</td>
    </tr>
    <tr>
      <td>Posts return 404</td>
      <td>Wrong filenames or not in <code class="language-plaintext highlighter-rouge">_posts/</code>.Use <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-title.md</code> inside <code class="language-plaintext highlighter-rouge">_posts/</code></td>
    </tr>
    <tr>
      <td>Homepage shows no posts</td>
      <td>Used <code class="language-plaintext highlighter-rouge">layout: default</code> instead of <code class="language-plaintext highlighter-rouge">layout: home</code> in <code class="language-plaintext highlighter-rouge">index.md</code>. Change to <code class="language-plaintext highlighter-rouge">layout: home</code></td>
    </tr>
    <tr>
      <td>Broken CSS or links</td>
      <td><code class="language-plaintext highlighter-rouge">baseurl</code> not set correctly. Set <code class="language-plaintext highlighter-rouge">baseurl: "/your-repo"</code> if site is in subdirectory</td>
    </tr>
    <tr>
      <td>Works locally but not on GitHub Pages</td>
      <td>Pushed <code class="language-plaintext highlighter-rouge">_site/</code> or didn‚Äôt let GitHub build it. Don‚Äôt push <code class="language-plaintext highlighter-rouge">_site/</code>; let GitHub Pages build</td>
    </tr>
    <tr>
      <td>Port 4000 in use locally</td>
      <td>Another Jekyll site is running. Run with <code class="language-plaintext highlighter-rouge">--port 4001</code> or another available port</td>
    </tr>
  </tbody>
</table>

<hr />

<blockquote>
  <h2 id="-technuggetz">üß† TechNuggetz</h2>
  <p>‚ö°Use <strong><code class="language-plaintext highlighter-rouge">bundle exec jekyll serve --livereload</code></strong> to auto-refresh the site on save.</p>

  <p>‚ö°Experiment with themes! Start with <strong>jekyll/minima</strong>, then explore custom themes or GitHub‚Äôs theme chooser.</p>

  <p>‚ö°Use HTML inside markdown files for advanced formatting.</p>

  <p>‚ö°Want to blog in multiple categories? Add tags or categories to your posts‚Äô front matter.</p>

  <p>‚ö°Commit often with meaningful messages, especially before publishing.</p>
</blockquote>

<hr />

<blockquote>
  <h2 id="--next-on-techn0tz">üîú  Next on Techn0tz..</h2>
  <p>Thinking of a pause ‚Äî a moment of thoughtfulness between lines of code.
<strong><em>Stay tuned on üöÄTechn0tz!!</em></strong> for a new reflective series on <strong><em>Marcus Aurelius‚Äô Meditations</em></strong>.</p>
</blockquote>]]></content><author><name>Manjushaps</name></author><category term="Jekyll" /><summary type="html"><![CDATA[üìÉ Introduction Welcome to Part 4 of the Jekyll Series on Techn0tz!!.]]></summary></entry><entry><title type="html">Jekyll Series: Part 3 - Deploy your Jekyll Site to GitHub Pages</title><link href="https://manjushaps.github.io/Techn0tz/jekyll/2025/05/22/Jekyll-Series-Part-3.html" rel="alternate" type="text/html" title="Jekyll Series: Part 3 - Deploy your Jekyll Site to GitHub Pages" /><published>2025-05-22T00:00:00+05:30</published><updated>2025-05-22T00:00:00+05:30</updated><id>https://manjushaps.github.io/Techn0tz/jekyll/2025/05/22/Jekyll-Series-Part-3</id><content type="html" xml:base="https://manjushaps.github.io/Techn0tz/jekyll/2025/05/22/Jekyll-Series-Part-3.html"><![CDATA[<h2 id="-missed-part-1-and-part-2">üîó Missed Part-1 and Part-2?</h2>
<p>üëâ Checkout <strong><a href="/Techn0tz/jekyll/2025/05/09/Jekyll-Series-Part-1">Jekyll Series: Part-1</a></strong> and <strong><a href="/Techn0tz/jekyll/2025/05/15/Jekyll-Series-Part-2"> Part-2</a></strong> to get familiar with installing Git, Ruby, Bundler, and Jekyll, and to learn how to build and preview a Jekyll site locally.</p>

<h1 id="-introduction">üìÉ Introduction</h1>

<p>Welcome to <strong>Part 3 of the Jekyll Series</strong> on <strong>üöÄTechn0tz</strong>. In this post, you will learn how to make the Jekyll site you built and previewed locally in <strong>Part 2</strong> live on the internet using GitHub Pages. GitHub Pages is a free and reliable platform for hosting static websites directly from your GitHub repository, making it an ideal choice for Jekyll sites.</p>

<p>By the end of this tutorial, you will know how to initialize a Git repository for your Jekyll site, connect it to a remote GitHub repository, and deploy your site with just a few commands. Whether you‚Äôre creating a personal blog or a project site, this guide will help you make your Jekyll site live and accessible to anyone online.</p>

<p><strong><em>üéàLet‚Äôs get started!</em></strong></p>

<hr />

<h1 id="-prerequisites">üéØ Prerequisites</h1>

<ul>
  <li>Before we begin, ensure that you have:
    <ul>
      <li><strong>A Jekyll Site</strong> - The Default Jekyll site that you built and tested locally, as covered in <strong><a href="/Techn0tz/jekyll/2025/05/15/Jekyll-Series-Part-2">Part 2</a></strong> of this series.</li>
      <li><strong>Git Installed</strong> - Git should be properly installed and configured on your system.</li>
      <li><strong>A GitHub Account</strong> - An active GitHub account, to push your site to a repository.</li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="-steps-for-deploying-your-site-to-github-pages">üìù Steps for Deploying Your Site to GitHub Pages</h1>
<h2 id="-step-1-initializing-a-git-repository">üåê Step 1: Initializing a Git Repository</h2>
<ul>
  <li>Navigate to your Jekyll site folder (eg. cd Users ; cd myblog).</li>
  <li>Initialize a Git repository using <strong><code class="language-plaintext highlighter-rouge">git init</code></strong>.</li>
  <li>Add all the files using <strong><code class="language-plaintext highlighter-rouge">git add .</code></strong>.</li>
  <li>
    <p>Make the initial commit with <strong><code class="language-plaintext highlighter-rouge">git commit -m message</code></strong>.</p>
  </li>
  <li><em>Screenshot</em> - Git Bash terminal from init to commit.
<img src="/Techn0tz/assets/images/init_to_ commit_part3.png" alt="init_commit" width="600" height="auto" /></li>
</ul>

<h2 id="-step-2-create-a-new-repository-on-github">üåê Step 2: Create a New Repository on GitHub</h2>
<ul>
  <li>Go to <strong>GitHub.com</strong> and log in.</li>
  <li>Click on the <strong>‚ûï‚ÄùNew Repository‚Äù</strong> button.</li>
  <li>Choose a repository name:
    <ul>
      <li>For a User/Organization Site: <strong>your-username.github.io</strong>.</li>
      <li>For a Project Site: Any other name of your choice.</li>
    </ul>
  </li>
  <li>Set the repository visibility to <strong>‚ÄúPublic‚Äù or ‚ÄúPrivate‚Äù</strong> as needed.</li>
  <li>Do not initialize with a <strong>README, .gitignore, or license</strong>.</li>
  <li>
    <p>Click <strong>‚ÄúCreate Repository‚Äù</strong>.</p>
  </li>
  <li><em>Screenshot</em> - GitHub New Repository creation page.
<img src="/Techn0tz/assets/images/create_repo.png" alt="repo" width="600" height="auto" /></li>
</ul>

<h2 id="-step-3-link-local-repository-to-github">üåê Step 3: Link Local Repository to GitHub</h2>
<ul>
  <li>Set the default branch to main using <strong><code class="language-plaintext highlighter-rouge">git branch -M main</code></strong>.</li>
  <li>
    <p>Add remote origin using the command <strong><code class="language-plaintext highlighter-rouge">git remote add origin https://github.com/your-username/your-repo-name.git</code></strong>.</p>
  </li>
  <li><em>Screenshot</em> - Creating a new GitHub repository for your Jekyll site.
<img src="/Techn0tz/assets/images/rename_addorigin.png" alt="addorigin" width="600" height="auto" /></li>
</ul>

<h2 id="-step-4-push-your-site-to-github">üåê Step 4: Push Your Site to GitHub</h2>
<ul>
  <li>
    <p>Push the code to GitHub using <strong><code class="language-plaintext highlighter-rouge">git push -u origin main</code></strong> and open the Jekyll site folder in VS Code using <strong><code class="language-plaintext highlighter-rouge">code .</code></strong> (or your default text editor).</p>
  </li>
  <li>
    <p><em>Screenshot</em> - Pushing Jekyll Site to GitHub.
<img src="/Techn0tz/assets/images/push_originmain.png" alt="pushorigin" width="600" height="auto" /></p>
  </li>
  <li>
    <p><em>Screenshot</em> - Jekyll site folders in VS Code.
<img src="/Techn0tz/assets/images/site_vscode_folders.png" alt="vs folders" width="600" height="auto" /></p>
  </li>
  <li>
    <p><em>Screenshot</em> - Github repository showing the pushed site files.
<img src="/Techn0tz/assets/images/after_pushorigin.png" alt="afterorigin" width="600" height="auto" /></p>
  </li>
</ul>

<h2 id="-step-5--configure-github-pages">üåê Step 5:  Configure GitHub Pages</h2>
<ul>
  <li>Go to your <strong>GitHub repository settings</strong>.</li>
  <li>Scroll down to the <strong>‚ÄúPages‚Äù</strong> section.</li>
  <li>Set the <strong>Source branch (main or gh-pages)</strong> and the <strong>folder (root or docs)</strong>.</li>
  <li>
    <p>Click <strong>‚ÄúSave‚Äù</strong>.</p>
  </li>
  <li><em>Screenshot</em> - Repository configuration settings.
<img src="/Techn0tz/assets/images/config_GH.png" alt="GH config" width="600" height="auto" /></li>
</ul>

<h2 id="-step-6--verify-your-site-is-live">üåê Step 6:  Verify Your Site is Live</h2>
<ul>
  <li>
    <p>Once configured, GitHub will begin building your site. This may take a few minutes. When the process completes, refresh your browser to view your live site.</p>
  </li>
  <li>
    <p><em>Screenshot</em> - Browser showing the live Jekyll site URL.
<img src="/Techn0tz/assets/images/live_site_GH.png" alt="live_site" width="600" height="auto" /></p>
  </li>
</ul>

<hr />

<h1 id="-conclusion">üìÉ Conclusion</h1>
<p>In this part, you learned how to take your locally built Jekyll site and successfully deploy it using GitHub Pages. You initialized a Git repository, pushed your code, and configured GitHub Pages ‚Äî making your site publicly available. With this, your static site is now live on the internet.</p>

<hr />

<h2 id="-technuggetz">üí° Technuggetz</h2>
<p>Always preview your Jekyll site locally before pushing to GitHub to avoid any build errors.</p>

<hr />

<blockquote>
  <h2 id="--next-on-techn0tz">üîú  Next on Techn0tz..</h2>
  <p>In the final part of this Jekyll series, we‚Äôll walk through a complete live example ‚Äî from creating a new Jekyll site, customizing it, writing blog posts, and deploying it to GitHub Pages with real content.</p>

  <p><strong><em>Stay tuned to Techn0tz!! for the final step in your Jekyll journey.</em></strong></p>
</blockquote>]]></content><author><name>Manjushaps</name></author><category term="Jekyll" /><summary type="html"><![CDATA[üîó Missed Part-1 and Part-2? üëâ Checkout Jekyll Series: Part-1 and Part-2 to get familiar with installing Git, Ruby, Bundler, and Jekyll, and to learn how to build and preview a Jekyll site locally.]]></summary></entry><entry><title type="html">Jekyll Series: Part 2 - Build and Preview Jekyll Site Locally</title><link href="https://manjushaps.github.io/Techn0tz/jekyll/2025/05/15/Jekyll-Series-Part-2.html" rel="alternate" type="text/html" title="Jekyll Series: Part 2 - Build and Preview Jekyll Site Locally" /><published>2025-05-15T00:00:00+05:30</published><updated>2025-05-15T00:00:00+05:30</updated><id>https://manjushaps.github.io/Techn0tz/jekyll/2025/05/15/Jekyll-Series-Part-2</id><content type="html" xml:base="https://manjushaps.github.io/Techn0tz/jekyll/2025/05/15/Jekyll-Series-Part-2.html"><![CDATA[<h1 id="-introduction">üìÉ Introduction</h1>
<p><strong>üõ∏Welcome back to Techn0tz!</strong> In the previous post, we covered how to set up Git, Ruby, Bundler, and Jekyll on Windows. Now, it‚Äôs time to take the next step‚Äîbuilding and previewing your first Jekyll site locally.</p>
<ul>
  <li>In this post, you will:
    <ul>
      <li>Create a new Jekyll site from scratch.</li>
      <li>Understand the default folder structure of a Jekyll site.</li>
      <li>Build and serve your site locally, previewing changes in real time.</li>
      <li>Troubleshoot common issues.</li>
      <li>By the end of this guide, you will have a fully functional Jekyll site running on your local server, ready for further customization.</li>
    </ul>
  </li>
</ul>

<p><strong><em>üéàLet‚Äôs get started!</em></strong></p>

<hr />

<h1 id="-prerequisites">üéØ Prerequisites</h1>
<ul>
  <li>Before we begin, make sure you have completed the following:
    <ul>
      <li>Installed <strong>Git, Ruby, Bundler, and Jekyll</strong> on your Windows system. (If not, see <strong><a href="/Techn0tz/Jekyll/2025/05/09/Jekyll-Series-Part-1">Jekyll Series: Part1 - Jekyll setup on windows</a></strong>).</li>
      <li>Have a basic understanding of the Command Line Interface (CLI).</li>
    </ul>
  </li>
  <li>The screenshot below confirms the versions of Git, Ruby, Bundler, and Jekyll installed on your system.
<img src="/Techn0tz/assets/images/git_bundle_jekyll_v.png" alt="gbj version" width="600" height="auto" /></li>
</ul>

<hr />

<h1 id="-steps-to-build-jekyll-site-locally">üìù Steps to Build Jekyll Site Locally</h1>
<h2 id="-step-1-initialize-your-jekyll-site">üåê Step 1: Initialize Your Jekyll Site</h2>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">jekyll new myblog</code></strong> -  This command creates a new Jekyll site with all necessary files and folders pre-configured.
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">jekyll new</code></strong> - creates a new Jekyll site.</li>
      <li><strong><code class="language-plaintext highlighter-rouge">myblog</code></strong> - name of your site folder. You can replace <strong>myblog</strong> with any folder name.</li>
    </ul>
  </li>
  <li><em>Screenshot</em> - Running <strong><code class="language-plaintext highlighter-rouge">jekyll new myblog</code></strong> command in Git Bash
  <img src="/Techn0tz/assets/images/create_site.png" alt="site" width="600" height="auto" /></li>
</ul>

<blockquote>
  <p><strong>Note</strong>: This post uses the default Jekyll site setup without any custom themes or configurations. The default site already includes an example post <strong>(2025-05-12-welcome-to-jekyll.md)</strong>.</p>
</blockquote>

<h2 id="-step-2-navigate-to-the-directory">üåê Step 2: Navigate to the Directory</h2>
<ul>
  <li>Use <strong><code class="language-plaintext highlighter-rouge">cd myblog</code></strong> to enter the newly created site directory.
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">cd</code></strong> stands for change directory, this command moves to newly created folder <strong><code class="language-plaintext highlighter-rouge">myblog</code></strong>.</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p><strong>Tip: Use <code class="language-plaintext highlighter-rouge">ls -R</code> command to view the complete jekyll folder structure</strong>.</p>
</blockquote>

<ul>
  <li><em>Screenshot</em> - Running <strong><code class="language-plaintext highlighter-rouge">cd</code></strong> and <strong><code class="language-plaintext highlighter-rouge">ls -R</code></strong> command in Git Bash 
<img src="/Techn0tz/assets/images/tree_struct.png" alt="folders" width="600" height="auto" /></li>
</ul>

<p>The directory structure is:</p>
<ul>
  <li><strong><em>_config.yml</em></strong> - Main configuration file for your Jekyll site.</li>
  <li><strong><em>_posts/</em></strong> - Directory for your blog posts (Markdown files).</li>
  <li><strong><em>Gemfile</em></strong> -  Lists dependencies (gems) for your site.</li>
  <li><strong><em>Gemfile.lock</em></strong> -  Auto-generated by Bundler (dependency lock).</li>
  <li><strong><em>404.html</em></strong> - Default ‚ÄúPage not found‚Äù template.</li>
  <li><strong><em>about.markdown</em></strong> - Example ‚ÄúAbout Page‚Äù.</li>
  <li><strong><em>index.markdown</em></strong> - Homepage of your site.</li>
</ul>

<h2 id="-step-3-install-dependencies">üåê Step 3: Install Dependencies</h2>
<ul>
  <li>After navigating to your Jekyll site directory, install all the dependencies using <strong>Bundler</strong>.
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">bundle install</code></strong> - This command automatically reads the <strong>GemFile</strong> and install all the required plugins and supporting libraries for your Jekyll site.</li>
    </ul>
  </li>
  <li><em>Screenshot</em> - Running <strong><code class="language-plaintext highlighter-rouge">bundle intall</code></strong> command in Git Bash
<img src="/Techn0tz/assets/images/bundle_install.png" alt="bundle" width="600" height="auto" /></li>
</ul>

<h2 id="-step-4-build-and-serve-jekyll-site-locally">üåê Step 4: Build and Serve Jekyll Site Locally</h2>
<ul>
  <li>Now all the dependencies are installed locally, the next step is to build and preview your Jekyll site locally on your system.
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code></strong> - This command builds the site using the correct version of Jekyll specified for your Gemfile and starts a local development server <strong>(http://localhost:4000)</strong> by default.</li>
    </ul>
  </li>
  <li><em>Screenshot</em> - Running <strong><code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code></strong> command in Git Bash
<img src="/Techn0tz/assets/images/bundle_exec.png" alt="bundle_exec" width="600" height="auto" /></li>
</ul>

<h3 id="-accessing-local-jekyll-site">üîé Accessing Local Jekyll Site</h3>
<ul>
  <li>Open your web browser.</li>
  <li>Go to <strong>http://localhost:4000 (or http://127.0.0.1:4000)</strong>.</li>
  <li>You should see your default Jekyll site running.
<img src="/Techn0tz/assets/images/jekyll_test_result.png" alt="jekyll_result" width="600" height="auto" /></li>
</ul>

<hr />

<h2 id="-understanding-how-changes-work">üß≠ Understanding How Changes Work</h2>
<ul>
  <li>Now that your Jekyll site is up and running, let‚Äôs see how it responds to changes. Jekyll automatically rebuilds the site when files are changed.</li>
  <li><strong>Example: Modify the index.md file (change the title, as shown in the screenshot below).</strong></li>
  <li>
    <p><em>Screenshot</em> - Editing index.md file
<img src="/Techn0tz/assets/images/change_md.png" alt="md update" width="600" height="auto" /></p>
  </li>
  <li>Immediately, the Jekyll terminal will display that the site has been rebuilt.</li>
  <li>
    <p><em>Screenshot</em> - The terminal showing updated changes.
<img src="/Techn0tz/assets/images/change_status_terminal.png" alt="terminal" width="600" height="auto" /></p>
  </li>
  <li>Refresh your web browser (http://localhost:4000), and you will instantly see the updated site.</li>
  <li><em>Screenshot</em> - Updated site preview
<img src="/Techn0tz/assets/images/after_update_md.png" alt="md update" width="600" height="auto" /></li>
</ul>

<hr />

<h2 id="-understanding-markdown-files-and-jekyll-_posts-directory">üí° Understanding Markdown files and Jekyll _posts Directory</h2>
<ul>
  <li>With your site running, it‚Äôs time to learn how to create content. Jekyll uses <strong>Markdown (.md)</strong> files to create and format blog posts.
    <ul>
      <li><strong>Markdown (.md)</strong> is a light-weight markup language that uses simple symbols to format text.</li>
      <li>Jekyll use Markdown files to create and format blog posts.</li>
    </ul>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  # Heading 1
  ## Heading 2
  - Bullet list item
  **Bold Text**
  [Link Text](https://example.com)
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="-jekylls-_posts-directory">üìÅ Jekyll‚Äôs _posts Directory</h3>
<ul>
  <li>This directory stores all your blog posts.</li>
  <li><strong>Naming convention:  YYYY-MM-DD-post-title.md (eg. 2025-05-12-welcome-to-jekyll.md)</strong>.</li>
  <li>
    <p>Each post must begin with <strong>Front Matter (YAML format)</strong>, which provides essential details about the post.</p>
  </li>
  <li><strong>Example for Front Matter:</strong>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>layout: post
title: "My First Blog Post"
date: 2025-05-10 
categories: Git
</code></pre></div>    </div>
  </li>
  <li>The <strong>layout</strong>: post specifies that this is a blog post.</li>
  <li>The <strong>title, date, and categories</strong> fields describe your post.</li>
</ul>

<hr />

<h2 id="Ô∏è-creating-your-first-blog-post-using-vs-code">‚ÄºÔ∏è Creating Your First Blog Post using VS Code</h2>
<ul>
  <li>Open the _posts directory in <strong>VS Code</strong> (or your preferred text editor).</li>
  <li>Create a new <strong>.md</strong> file with the format: <strong>YYYY-MM-DD-post-title.md</strong>.</li>
  <li>Add front matter and content using markdown syntax.</li>
  <li>Write your post content below the Front Matter using Markdown.</li>
  <li>Save the file.</li>
  <li>
    <p>Refresh your local site <strong>(http://localhost:4000)</strong> to see your new post appear.</p>
  </li>
  <li>
    <p><em>Screenshot</em> - Creating a new post in VS Code.
<img src="/Techn0tz/assets/images/VScode_new post.png" alt="VScode" width="600" height="auto" /></p>
  </li>
  <li>
    <p><em>Screenshot</em> - Git Bash terminal showing site rebuild after adding the post.
<img src="/Techn0tz/assets/images/new_post_terminal.png" alt="np_terminal1" width="600" height="auto" /></p>
  </li>
  <li><em>Screenshot</em> - Jekyll site displaying the new post and its content.
<img src="/Techn0tz/assets/images/WP_new_post.png" alt="webpage" width="600" height="auto" />
<img src="/Techn0tz/assets/images/new_post_content.png" alt="post_content" width="600" height="auto" /></li>
</ul>

<hr />

<h1 id="-troubleshooting-common-issues">üí≠ Troubleshooting Common Issues</h1>

<table>
  <thead>
    <tr>
      <th><strong>Issue</strong></th>
      <th><strong>Cause</strong></th>
      <th><strong>Solution</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong><code class="language-plaintext highlighter-rouge">Could not locate Gemfile or .bundle/ directory</code></strong></td>
      <td>Not in site directory.</td>
      <td>Ensure you are in your Jekyll site folder before running <strong><code class="language-plaintext highlighter-rouge">bundle install</code></strong>.</td>
    </tr>
    <tr>
      <td><strong><code class="language-plaintext highlighter-rouge">Could not find webrick</code> (Older Ruby versions)</strong></td>
      <td>Missing dependency.</td>
      <td>Run <strong><code class="language-plaintext highlighter-rouge">bundle add webrick</code></strong> and try again.</td>
    </tr>
    <tr>
      <td><strong>Site not showing changes</strong></td>
      <td>Browser cache or server not running.</td>
      <td>Make sure the local server is running. Clear browser cache and refresh.</td>
    </tr>
    <tr>
      <td><strong><code class="language-plaintext highlighter-rouge">Permission denied</code> (Windows)</strong></td>
      <td>Lack of admin rights.</td>
      <td>Run Git Bash as Administrator.</td>
    </tr>
    <tr>
      <td><strong><code class="language-plaintext highlighter-rouge">Address already in use</code> error</strong></td>
      <td>Port 4000 is occupied.</td>
      <td>Use <strong><code class="language-plaintext highlighter-rouge">bundle exec jekyll serve --port 4001</code></strong> to use a different port.</td>
    </tr>
    <tr>
      <td><strong>Markdown not rendering properly</strong></td>
      <td>Incorrect Markdown syntax.</td>
      <td>Verify your Markdown file has the correct syntax and Front Matter format.</td>
    </tr>
    <tr>
      <td><strong>Post not displayed in local site</strong></td>
      <td>Post has a future date</td>
      <td>Use <strong><code class="language-plaintext highlighter-rouge">--future</code></strong> flag to preview future posts: <strong><code class="language-plaintext highlighter-rouge">bundle exec jekyll serve --future</code></strong>.</td>
    </tr>
  </tbody>
</table>

<hr />

<h1 id="-conclusion">üìú Conclusion</h1>
<ul>
  <li>üéâCongratulations! You have successfully:
    <ul>
      <li>Built and served your first Jekyll site locally.</li>
      <li>Learned how Jekyll automatically updates your site with changes.</li>
      <li>Understood Markdown syntax and the _posts directory.</li>
      <li>Created your first blog post using Markdown.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="-technuggetz---did-you-know">üß† Technuggetz - Did you Know?</h2>
<blockquote>

  <p>‚ö°<strong>Instant update with Live Reload</strong> - Use <strong><code class="language-plaintext highlighter-rouge">bundle exec jekyll serve --livereload</code></strong> for automatic page reloads in your browser whenever you make changes.</p>

  <p>‚ö°The <strong><code class="language-plaintext highlighter-rouge">bundle</code></strong> command used to manage your project‚Äôs dependencies defined in the <strong>Gemfile</strong>, while <strong>Bundler</strong> is the Ruby gem (package) that provides the <strong><code class="language-plaintext highlighter-rouge">bundle</code></strong> command. Use them appropriately!</p>

  <p>‚ö°<strong>Quickly create a post</strong> - Run <strong><code class="language-plaintext highlighter-rouge">bundle exec jekyll post "Your New Post Title"</code></strong> to instantly generate a new postin your _posts directory.</p>
</blockquote>

<hr />

<blockquote>
  <p>In the next post, you will learn how to push your Jekyll site to GitHub Pages and make it accessible online.</p>

  <p><strong><em>Stay tuned to üöÄTechn0tz!! for the next step in your Jekyll journey.</em></strong></p>
</blockquote>]]></content><author><name>Manjushaps</name></author><category term="Jekyll" /><summary type="html"><![CDATA[üìÉ Introduction üõ∏Welcome back to Techn0tz! In the previous post, we covered how to set up Git, Ruby, Bundler, and Jekyll on Windows. Now, it‚Äôs time to take the next step‚Äîbuilding and previewing your first Jekyll site locally. In this post, you will: Create a new Jekyll site from scratch. Understand the default folder structure of a Jekyll site. Build and serve your site locally, previewing changes in real time. Troubleshoot common issues. By the end of this guide, you will have a fully functional Jekyll site running on your local server, ready for further customization.]]></summary></entry><entry><title type="html">Jekyll Series: Part 1 - Jekyll Setup on Windows</title><link href="https://manjushaps.github.io/Techn0tz/jekyll/2025/05/09/Jekyll-Series-Part-1.html" rel="alternate" type="text/html" title="Jekyll Series: Part 1 - Jekyll Setup on Windows" /><published>2025-05-09T00:00:00+05:30</published><updated>2025-05-09T00:00:00+05:30</updated><id>https://manjushaps.github.io/Techn0tz/jekyll/2025/05/09/Jekyll-Series-Part-1</id><content type="html" xml:base="https://manjushaps.github.io/Techn0tz/jekyll/2025/05/09/Jekyll-Series-Part-1.html"><![CDATA[<h1 id="-introduction">üìÉ Introduction</h1>
<p>To build a clean, fast, and code-friendly blog or portfolio, <strong>Jekyll</strong> is one of the most versatile tools you can use. As a powerful, Ruby-based static site generator, Jekyll seamlessly integrates with GitHub Pages, allowing you to transform plain text files‚Äîwritten in Markdown or Liquid templates‚Äîinto fully functional websites without the complexity of databases or server-side scripting.</p>

<p>However, to ensure a smooth and efficient workflow, it‚Äôs crucial to set up your local Jekyll environment correctly‚Äîespecially on Windows, where a few additional steps are necessary. This guide will walk you through the complete setup process, providing clear instructions and troubleshooting tips to help you get Jekyll running flawlessly on your Windows system.</p>

<hr />

<h1 id="-system-requirements-and-prerequisites">üìë System Requirements and Prerequisites</h1>
<p>Before setting up Jekyll on Windows, let‚Äôs make sure your system is prepared with the right tools and environment. This will ensure a smooth installation experience.</p>

<h2 id="-minimum-system-requirements">üíª Minimum System Requirements</h2>
<ul>
  <li><em>Operating System</em> - Windows 10 or 11 (64 bit preferred)</li>
  <li><em>Admin Access</em> - To install system-level tools</li>
  <li><em>Basic Terminal Familarity</em> - A little command line experience</li>
</ul>

<h2 id="Ô∏è-tools-youll-need">üõ†Ô∏è Tools You‚Äôll Need</h2>

<table>
  <thead>
    <tr>
      <th><strong>Tool</strong></th>
      <th><strong>Purpose</strong></th>
      <th><strong>Official Site</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Git</td>
      <td>Version control, terminal access</td>
      <td><a href="https://git-scm.com">git-scm.com</a></td>
    </tr>
    <tr>
      <td>Ruby (DevKit)</td>
      <td>Needed to run Jekyll</td>
      <td><a href="https://rubyinstaller.org">rubyinstaller.org</a></td>
    </tr>
    <tr>
      <td>Bundler</td>
      <td>Manages Ruby gems</td>
      <td>Comes with Ruby or via <code class="language-plaintext highlighter-rouge">gem install</code></td>
    </tr>
    <tr>
      <td>Jekyll</td>
      <td>Static site generator</td>
      <td>Installed via RubyGems</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p><strong>Tip - Git Bash or Command Prompt can be used for setup. Pick whichever you‚Äôre more comfortable with</strong></p>
</blockquote>

<h2 id="-environment-used-for-this-guide">üí≠ Environment Used For This Guide</h2>
<blockquote>
  <p>To ensure a clean and reproducible setup process, I used <strong>Windows Sandbox</strong> ‚Äî a secure, disposable virtual environment available in Windows 10/11 Pro‚Äîfor testing and capturing screenshots during installation.</p>

  <p>This allowed me to document each step from a fresh state without interfering with my main system.</p>

  <p>However, you can follow all the steps below directly on your regular Windows system. Using Windows Sandbox is completely optional and only used here for demonstration purposes.</p>
</blockquote>

<hr />

<h1 id="-step-by-step-installation-on-windows">üìù Step-by-Step Installation (on Windows)</h1>
<h2 id="git-installation">Git Installation</h2>
<ul>
  <li>Download <strong>Git</strong> from <strong>https://git-scm.com</strong>
    <ul>
      <li>Save the installer to your Downloads folder.</li>
    </ul>
  </li>
</ul>

<ol>
  <li><strong>Run Git Installer</strong>
    <ul>
      <li>Double-click the downloaded .exe file to start the installation.</li>
      <li>You will see the welcome screen:
<img src="/Techn0tz/assets/images/Git_welcome.png" alt="Git welcome" width="400" height="auto" /></li>
    </ul>
  </li>
  <li><strong>Choose Installation Options</strong>
    <ul>
      <li>You will be guided through several setup screens.</li>
      <li>The key options you may want to customize are:
        <ul>
          <li>Default Editor: Choose your preferred text editor (e.g., Visual Studio Code)</li>
          <li>Adjusting PATH: Ensure ‚ÄúGit from the command line and 3rd-party software‚Äù is selected.</li>
          <li>Line Ending Conversion: Use recommended settings for Windows.</li>
          <li><strong>Tip: Here are the choices I made during setup:</strong>
<img src="/Techn0tz/assets/images/Default_editor.png" alt="Git welcome" width="400" height="auto" />
            <blockquote>
              <p><strong>Tip</strong> - If you are using VS Code as editor, ensure <strong>VS Code</strong> is installed in your system and proceed with <strong>Git</strong> installation</p>
            </blockquote>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Installation in Progress</strong>
    <ul>
      <li>Click ‚ÄúInstall‚Äù, and the setup will begin extracting files to the specified folders.
<img src="/Techn0tz/assets/images/During_install.png" alt="During install" width="400" height="auto" /></li>
    </ul>
  </li>
  <li><strong>Verify Git Installation</strong>
    <ul>
      <li>Once installation is complete, open Git Bash (from Start Menu or Desktop).</li>
      <li>Run the <strong><code class="language-plaintext highlighter-rouge">git --version</code></strong> command to verify installation 
<img src="/Techn0tz/assets/images/git_version_afterinstall.png" alt="Git version" width="600" height="auto" /></li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="ruby--devkit-installation">Ruby + DevKit Installation</h2>
<ul>
  <li>Download <strong>Ruby + DevKit(x64)</strong> from <strong>https://rubyinstaller.org</strong>
    <ul>
      <li>When installing Ruby on Windows, choosing the version with <strong>DevKit (Development Kit)</strong> is essential.</li>
      <li><strong>DevKit</strong> is a set of tools that allow Ruby to build and use gems (libraries) with native extensions (written in C/C++). This is especially important for tools like Jekyll, which rely on such gems.This DevKit is required for Windows but not for macOS or Linux.</li>
    </ul>
  </li>
</ul>

<ol>
  <li><strong>Run Ruby + DevKit installer</strong>
    <ul>
      <li>Run the downloaded .exe file to start the installation.</li>
      <li>This is the welcome screen of ruby
<img src="/Techn0tz/assets/images/Ruby_installation.png" alt="Ruby install" width="500" height="auto" /></li>
    </ul>
  </li>
  <li><strong>Installation Options and DevKit Setup</strong>
    <ul>
      <li>Make sure to check ‚ÄúAdd Ruby to PATH‚Äù ‚Äî this is essential for using Ruby from the command line.</li>
      <li>Choose the recommended installation directory for smooth setup.
<img src="/Techn0tz/assets/images/Ruby_exec_path.png" alt="exec path" width="500" height="auto" /></li>
      <li>Check the option to run <strong>ridk install</strong>, which will open a terminal
<img src="/Techn0tz/assets/images/Run_ridk_install.png" alt="terminal1" width="500" height="auto" /></li>
      <li>Running <strong>ridk install</strong> - Two-Step Process
        <ul>
          <li>After installation, you will be prompted with three options for setting up MSYS2.</li>
          <li>Choose Option 3: <strong>MSYS2 and MINGW development toolchain</strong>.
<img src="/Techn0tz/assets/images/Ruby_installer_terminal.png" alt="terminal1" width="500" height="auto" /></li>
          <li>A second set of options will appear.</li>
          <li>If unsure, press ENTER to continue with the recommended setup.
<img src="/Techn0tz/assets/images/Ruby_install_final.png" alt="terminal2" width="500" height="auto" /></li>
          <li>This completes the setup of MSYS2 and the MINGW toolchain.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Verify Ruby Installation</strong>
    <ul>
      <li>Once installation is complete, open Git Bash (from Start Menu or Desktop).</li>
      <li>Run the <strong><code class="language-plaintext highlighter-rouge">ruby -v</code></strong> command to verify installation 
<img src="/Techn0tz/assets/images/Ruby_version.png" alt="Ruby version" width="600" height="auto" /></li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="bundler-and-jekyll-installation">Bundler and Jekyll Installation</h2>
<ol>
  <li>In Command Prompt or Git Bash terminal, run <strong><code class="language-plaintext highlighter-rouge">gem install bundler jekyll</code></strong>.
    <ul>
      <li>This the installation screen.
<img src="/Techn0tz/assets/images/bundler_jekyll_install.png" alt="bundler" width="500" height="auto" />
Continues‚Ä¶.
<img src="/Techn0tz/assets/images/bundler_jekyll_final.png" alt="Jekyll" width="500" height="auto" /></li>
    </ul>
  </li>
  <li>Verify bundler and jekyll installation
    <ul>
      <li>Run <strong><code class="language-plaintext highlighter-rouge">bundler -v</code></strong> and <strong><code class="language-plaintext highlighter-rouge">jekyll -v</code></strong> commands to verify installation
<img src="/Techn0tz/assets/images/bundler_jekyll_version.png" alt="BJ version" width="500" height="auto" /></li>
    </ul>
  </li>
</ol>

<blockquote>
  <p><strong><em>Tip: If Git, Ruby, Bundler, or Jekyll are not recognized, ensure their installation paths are correctly added to your system‚Äôs Environment Variables. Manually add them if missing, and verify with the respective version commands.</em></strong></p>
</blockquote>

<hr />

<h1 id="-common-jekyll-issues">üîß Common Jekyll issues</h1>

<table>
  <thead>
    <tr>
      <th><strong>Issue</strong></th>
      <th><strong>Error Message</strong></th>
      <th><strong>Cause</strong></th>
      <th><strong>Solution</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Command not recognized</td>
      <td><code class="language-plaintext highlighter-rouge">'jekyll'</code> is not recognized</td>
      <td>Ruby not in PATH</td>
      <td>Add Ruby to system PATH (Environment Variables).</td>
    </tr>
    <tr>
      <td>Port conflict</td>
      <td>Address already in use - <code class="language-plaintext highlighter-rouge">127.0.0.1:4000</code></td>
      <td>Port 4000 in use</td>
      <td>Use <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve --port 4001</code>.</td>
    </tr>
    <tr>
      <td>Blank page in browser</td>
      <td>No content at <code class="language-plaintext highlighter-rouge">http://127.0.0.1:4000</code></td>
      <td>HTTPS instead of HTTP</td>
      <td>Use <code class="language-plaintext highlighter-rouge">http://127.0.0.1:4000/</code> (HTTP).</td>
    </tr>
    <tr>
      <td>Ruby installer blocked</td>
      <td>Security prompt or failure</td>
      <td>Windows SmartScreen</td>
      <td>Disable SmartScreen temporarily.</td>
    </tr>
    <tr>
      <td>Gem installation fails</td>
      <td>Could not find a valid gem <code class="language-plaintext highlighter-rouge">'jekyll'</code></td>
      <td>Missing/Outdated Bundler</td>
      <td>Run <code class="language-plaintext highlighter-rouge">gem install bundler</code> and <code class="language-plaintext highlighter-rouge">gem update --system</code>.</td>
    </tr>
  </tbody>
</table>

<hr />

<h1 id="-conclusion">üìÑ Conclusion</h1>
<p>You have successfully set up your local environment for Jekyll on Windows, with <strong>Git, Ruby, Bundler, and Jekyll</strong> installed and verified. This foundational setup ensures you are ready to build, customize, and launch your own static site with confidence. In the next post, you‚Äôll learn how to create, run, and manage a Jekyll site locally‚Äîtransforming your installation into a fully functional website.</p>

<blockquote>
  <p><strong><em>Stay tuned to üöÄTechn0tz for the next step in your Jekyll journey.</em></strong></p>
</blockquote>]]></content><author><name>Manjushaps</name></author><category term="Jekyll" /><summary type="html"><![CDATA[üìÉ Introduction To build a clean, fast, and code-friendly blog or portfolio, Jekyll is one of the most versatile tools you can use. As a powerful, Ruby-based static site generator, Jekyll seamlessly integrates with GitHub Pages, allowing you to transform plain text files‚Äîwritten in Markdown or Liquid templates‚Äîinto fully functional websites without the complexity of databases or server-side scripting.]]></summary></entry><entry><title type="html">Git Series: Part 3 - Branching and Merging</title><link href="https://manjushaps.github.io/Techn0tz/git/2025/05/02/Git-Series-Part-3.html" rel="alternate" type="text/html" title="Git Series: Part 3 - Branching and Merging" /><published>2025-05-02T00:00:00+05:30</published><updated>2025-05-02T00:00:00+05:30</updated><id>https://manjushaps.github.io/Techn0tz/git/2025/05/02/Git-Series-Part-3</id><content type="html" xml:base="https://manjushaps.github.io/Techn0tz/git/2025/05/02/Git-Series-Part-3.html"><![CDATA[<h1 id="how-git-stores-data">üìÅHow Git stores Data?</h1>
<p>Before diving into branching, it‚Äôs important to understand how Git stores your project.
Unlike some older version control systems, Git doesn‚Äôt store data as a series of changesets or differences. Instead, it stores your project as a series of snapshots.</p>

<p>Each time you commit, Git captures the full state of your project ‚Äî like taking a photo of all your files at that moment.</p>

<p>But a commit does more than just save a message. It also records the complete snapshot, links to its parent commit, and silently builds the structure that makes branching possible.</p>

<p>This creates a chain ‚Äî each commit pointing to the one before it ‚Äî forming a structure called a <strong>Directed Acyclic Graph (DAG)</strong>.</p>

<p>For example.. <strong><code class="language-plaintext highlighter-rouge">[C0]&lt;--[C1]&lt;--[C2]....</code></strong> (C - commits, C0 is the initial commit, C1 is the next and so on)</p>

<hr />

<h1 id="commit-internals">üìåCommit internals</h1>
<p>With that foundation, it‚Äôs time to explore what actually makes up a Git commit.</p>

<p>Behind every commit is a compact data structure that stores your project‚Äôs snapshot, tracks changes over time, and links everything together. Understanding this internal structure helps you see how branching ‚Äî and Git‚Äôs powerful history tracking ‚Äî works under the hood.</p>

<p>When you run <strong>git commit</strong>, Git creates a commit object that includes:</p>
<ul>
  <li><em>A pointer to a tree</em> - The tree object represents the snapshot of your project directory.It also maps file names to blobs (file contents) and subfolders to other trees.</li>
  <li><em>Parent commit</em> - The parent commit is just a pointer (a SHA-1 hash) to the previous commit(s).Each commit (except the first) points back to at least one parent and a merge commit has multiple parents.</li>
  <li><em>Metadata</em> - Author name, email, timestamp and committer info (can be different)</li>
  <li><em>Commit message</em> - The message  for the commit given in <strong>git commit -M message</strong></li>
</ul>

<p><em>For example if you commit three files, the Git repository contains five objects:</em></p>
<ul>
  <li><strong>Three Blobs:</strong> These blobs represent the contents of each file.</li>
  <li><strong>One tree:</strong> This tree object holds the folder structure and file names.</li>
  <li><strong>One commit:</strong> The commit object points to the tree and stores metadata like the author, commit message, and timestamp.</li>
</ul>

<p><img src="/Techn0tz/assets/images/commit_internals.png" alt="commit_internals" width="500" height="auto" /></p>

<h2 id="-subsequent-commit-with-changes">üîÉ Subsequent Commit with Changes</h2>

<p>When you modify one of the files and commit again, Git handles the changes efficiently:</p>

<ul>
  <li><em>New Blob for the modified file:</em> A new blob is created for the modified file, containing only the changes.</li>
  <li><em>Reused Blobs for unchanged files:</em> Git reuses the blobs for the files that haven‚Äôt been modified, saving space and processing time.</li>
  <li><em>New Tree:</em> A new tree object is created that points to the correct mix of old and new blobs. This ensures the updated file structure reflects the changes.</li>
  <li><em>New Commit Object:</em> A new commit object is created, pointing to the new tree. It also points to the previous commit as its parent, preserving the commit history.</li>
</ul>

<h2 id="Ô∏è-branching-and-the-role-of-head">üóíÔ∏è Branching and the Role of HEAD</h2>
<p>The <strong>main branch (and HEAD)</strong> points to the latest commit, effectively continuing the chain of commits. This structure ‚Äî consisting of snapshots (blobs), directories (trees), and commit objects ‚Äî is what makes Git branching so fast and powerful. Each new commit doesn‚Äôt duplicate data but rather builds upon the existing objects, making the entire process efficient and scalable.</p>

<hr />

<h1 id="-git-branching-and-merging">üîó Git Branching and Merging</h1>
<p>Git branching is a powerful feature that allows you to develop features, fix bugs, or experiment with new ideas in isolation ‚Äî without affecting the main codebase.</p>

<p>A <strong>branch in Git</strong> is essentially a lightweight pointer to a specific commit. When you create a new branch, you‚Äôre starting a separate line of development, allowing you to make changes independently of the default branch (often called main or master).</p>

<p>Each time you commit on a branch, the branch pointer (e.g., main or feature-xyz) automatically advances to point to the latest commit. This way, Git tracks the evolution of that branch as development continues.</p>

<p><strong>Merging in Git</strong> combines the changes from one branch (like feature) into another (like main) by creating a merge commit that links the histories of both branches.</p>

<p>The diagram below illustrates how Git handles branching and merging, starting from a common base commit and progressing through independent development on a feature branch:</p>

<p><img src="/Techn0tz/assets/images/Git_branching_eg.png" alt="Branching_eg" width="500" height="auto" /></p>

<p>The table below shows a typical workflow and commit relationships</p>

<table>
  <thead>
    <tr>
      <th><strong>Commit</strong></th>
      <th><strong>Branch</strong></th>
      <th><strong>Parent(s)</strong></th>
      <th><strong>Explanation</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>A</td>
      <td>main</td>
      <td>initial commit</td>
      <td>First commit in the repo</td>
    </tr>
    <tr>
      <td>B</td>
      <td>main</td>
      <td>A</td>
      <td>B is the next commit after A</td>
    </tr>
    <tr>
      <td>C</td>
      <td>main</td>
      <td>B</td>
      <td>C follows B; the point where feature branch is created</td>
    </tr>
    <tr>
      <td>D</td>
      <td>feature</td>
      <td>C</td>
      <td>First commit on <code class="language-plaintext highlighter-rouge">feature</code>, created from <code class="language-plaintext highlighter-rouge">main</code> at C</td>
    </tr>
    <tr>
      <td>E</td>
      <td>feature</td>
      <td>D</td>
      <td>Continues work in <code class="language-plaintext highlighter-rouge">feature</code> branch</td>
    </tr>
    <tr>
      <td>F</td>
      <td>main</td>
      <td>C, E</td>
      <td>Merge commit: merges <code class="language-plaintext highlighter-rouge">feature</code> back into <code class="language-plaintext highlighter-rouge">main</code></td>
    </tr>
  </tbody>
</table>

<hr />

<h1 id="-git-branching-and-merging-commands">üìú Git Branching and Merging commands</h1>

<table>
  <thead>
    <tr>
      <th><strong>Command</strong></th>
      <th><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git branch</code></td>
      <td>Lists all local branches in the repository</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git branch &lt;branch-name&gt;</code></td>
      <td>Creates a new branch</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git checkout &lt;branch-name&gt;</code></td>
      <td>Switches to the specified branch</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git switch &lt;branch-name&gt;</code></td>
      <td>Alternative to checkout (modern &amp; safer)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git checkout -b &lt;branch-name&gt;</code></td>
      <td>Creates and switches to a new branch</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git switch -c &lt;branch-name&gt;</code></td>
      <td>Equivalent to the above (more readable syntax)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git branch -d &lt;branch-name&gt;</code></td>
      <td>Deletes a local branch (only if it‚Äôs merged)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git branch -D &lt;branch-name&gt;</code></td>
      <td>Force-deletes a local branch (even if unmerged)</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th><strong>Command</strong></th>
      <th><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git merge &lt;branch-name&gt;</code></td>
      <td>Merges the given branch into the current branch</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git merge --no-ff &lt;branch-name&gt;</code></td>
      <td>Creates a merge commit even if a fast-forward is possible</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git log --graph --oneline</code></td>
      <td>Shows a visual history of commits with branches/merges</td>
    </tr>
  </tbody>
</table>

<hr />

<h1 id="branching-and-merging-in-action-a-snapshot-example">üí°Branching and Merging in Action: A Snapshot Example</h1>
<p>Below is a snapshot demonstrating how branching and merging work using Git commands.</p>

<p><img src="/Techn0tz/assets/images/branching_eg2.png" alt="branching_eg2" />
<img src="/Techn0tz/assets/images/branching_eg1.png" alt="branching_eg1" /></p>

<h2 id="-result">‚úÖ Result</h2>
<p>You can use the <strong><code class="language-plaintext highlighter-rouge">start index.html</code></strong> command (on Windows) to open the developed HTML page in your default browser and check if the merged content displays correctly.</p>

<hr />

<h1 id="-conclusion">üìÉ Conclusion</h1>
<p>Branching and merging are powerful features of Git that help you work on different tasks without affecting the main code. By creating branches, you can develop features safely, and by merging, you bring everything back together. With regular practice, these commands will become second nature and make your workflow smoother and more organized.</p>

<hr />

<h2 id="-technuggetz---did-you-know">üß† TechNuggetz - Did you know?</h2>
<blockquote>

  <p>üîß A <strong>hotfix branch</strong> is a special-purpose Git branch used to quickly patch a bug in production without waiting for ongoing development to finish.</p>

  <p>üîç Clean up merged branches using <strong><code class="language-plaintext highlighter-rouge">git branch -d branch_name (or -D to force)</code></strong>.</p>

  <p>‚õìÔ∏è‚Äçüí• Use <strong>merge</strong> for team work, <strong>rebase</strong> for cleaner individual history.</p>

  <p>üí≠ <strong><code class="language-plaintext highlighter-rouge">git log --oneline --decorate</code></strong> can also be used to view branches and merges</p>

  <p>üß≠ <strong><code class="language-plaintext highlighter-rouge">git switch</code></strong> is a newer and clearer alternative to <strong><code class="language-plaintext highlighter-rouge">git checkout</code></strong> for switching branches.</p>
</blockquote>

<hr />

<h2 id="-next-on-techn0tz">üîú Next on Techn0tz</h2>
<p><em>Developing a GitHub page using Jekyll on windows</em></p>]]></content><author><name>Manjushaps</name></author><category term="Git" /><summary type="html"><![CDATA[üìÅHow Git stores Data? Before diving into branching, it‚Äôs important to understand how Git stores your project. Unlike some older version control systems, Git doesn‚Äôt store data as a series of changesets or differences. Instead, it stores your project as a series of snapshots.]]></summary></entry><entry><title type="html">Git Series: Part 1 - Local Version Control</title><link href="https://manjushaps.github.io/Techn0tz/git/2025/04/25/Git-Series-Part-1.html" rel="alternate" type="text/html" title="Git Series: Part 1 - Local Version Control" /><published>2025-04-25T00:00:00+05:30</published><updated>2025-04-25T00:00:00+05:30</updated><id>https://manjushaps.github.io/Techn0tz/git/2025/04/25/Git-Series-Part-1</id><content type="html" xml:base="https://manjushaps.github.io/Techn0tz/git/2025/04/25/Git-Series-Part-1.html"><![CDATA[<h1 id="-from-vcs-to-git">üöÄ From VCS to Git</h1>

<p>In the last post, we explored Version Control System and their types ‚Äî CVCS and DVCS. Now, let‚Äôs zoom into the most popular DVCS tool in the world: <strong>Git</strong> ‚Äî and see how it powers modern development.</p>

<hr />

<h1 id="-what-is-git">üìú What is Git?</h1>

<p>Git is open source Distributed Version Control Sytem which allows developers</p>
<ul>
  <li>Track changes in code over time</li>
  <li>Collaborate seamlessly with teammates</li>
  <li>Create branches for experimental study</li>
  <li>Roll back to previous versions when things goes wrong</li>
</ul>

<blockquote>
  <p>‚åõThink of Git as your <strong>projects time machine</strong> - but smarter, faster and made for team work</p>
</blockquote>

<hr />

<h1 id="-core-components-git-and-lvc-worflow">üéØ Core Components Git and LVC worflow</h1>

<p>The Git workflow is a step-by-step process that defines how changes in a project move from your local machine to a shared, remote repository like GitHub. Mastering this flow helps you collaborate smoothly and  manage versions efficiently.</p>

<p><strong>This post explains about Git basics and how the files are committed locally</strong></p>

<p>The core components of LVC worflow are: <strong>Working Directory, Staging Area, Local Repository</strong>. Understanding how files move through these stages are essential.</p>

<p><img src="/Techn0tz/assets/images/LVC_workflow.png" alt="LVC Workflow" width="500" height="auto" /></p>

<p>The diagram above outlines the LVC process. Now, let‚Äôs explore each stage and see how your local project files eventually become committed, shared history.</p>

<h2 id="-working-directory">üìÇ Working Directory</h2>

<p>This is the local folder on your computer where you edit and work on your project files</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">git init</code></strong> command - Intializes a Git repository
    <ul>
      <li>The Git starts tracking the specified folder as a Git project- in other words, your plain folder(working directory) is converted into .Git project</li>
      <li>Creates a hidden <strong>.git.</strong> folder in the working directory</li>
      <li>This .git/  folder contains everything that Git needs to track your project (eg. commit, branch, logs etc)</li>
      <li>Your <strong>working directory stays the same</strong>, but now Git is watching for changes</li>
    </ul>
  </li>
</ul>

<h2 id="Ô∏è-staging-area">üóÉÔ∏è Staging Area</h2>

<p>The staging area (index) is like a holding zone- where Git gathers all the changes that you want to commit</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">git add</code></strong> command - moves the changes from working directory to the staging area
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">git add filename</code></strong> - Adds a specific file to the staging area</li>
      <li><strong><code class="language-plaintext highlighter-rouge">git add .</code></strong> - Adds all the modified files in the folder</li>
    </ul>
  </li>
</ul>

<h2 id="-local-repository">üìÅ Local Repository</h2>

<p>The local repository is the <strong>.git directory</strong>- which is the Git‚Äôs repository storage</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git commit</code> command - the changes from the staging area are permanently stored in the repository
    <ul>
      <li>The repository is located inside the hidden <strong>.git/</strong> folder- the one created by <strong><code class="language-plaintext highlighter-rouge">git init</code></strong></li>
      <li>The .git directory contains all the commits, project history, branches, logs etc</li>
    </ul>
  </li>
</ul>

<h1 id="example-snapshot-from-init-to-commit-in-lvc">üí°Example Snapshot: From init to commit in LVC</h1>

<p>The snapshot below provides a practical example of how to create a new directory, initialize a Git repository, and set up local version control. It will walk you through the essential steps, including adding files to the staging area, committing changes, and managing version history on your local machine. By following along, you‚Äôll gain hands-on experience in using Git for efficient source code management.</p>

<p><img src="/Techn0tz/assets/images/LVC_snapshot.png" alt="LVC_example" /></p>

<hr />

<h2 id="-technuggetz---did-you-know">üß† TechNuggetz - Did you Know?</h2>

<blockquote>
  <p>‚åõ <strong>Git</strong> was built by <strong>Linus Torvalds - Founder of Linus</strong> in just 2 weeks in 2005 - Iconic!</p>

  <p>‚òëÔ∏è <strong>Git</strong> knows everything locally, it dosen‚Äôt need internet to track changes - from version history, staging and committing - everithing happens in your local machine.</p>

  <p>‚ùå Made a mistake? <strong><code class="language-plaintext highlighter-rouge">git checkout -- filename</code></strong> - restores a file to its last committed state</p>

  <p>üóÇÔ∏è Track only what matters! Use a <strong><code class="language-plaintext highlighter-rouge">.gitignore</code></strong> file to prevent sensitive data (like passwords, logs, or config files) from slipping into your commits. A cleaner repo is a safer repo!</p>

  <p>ü™Ñ Autosave magic! Use <strong><code class="language-plaintext highlighter-rouge">git stash</code></strong> to save your work-in-progress without a commit. Come back later with <strong><code class="language-plaintext highlighter-rouge">git stash pop</code></strong> and pick up right where you left off!</p>
</blockquote>

<p>Continue.. <strong>üëâ To push your Git project to Remote repository like GitHub <a href="/Techn0tz/git/2025/04/25/Git-Series-Part-2">Part-2:Remote-repository</a></strong></p>

<p><strong><em>Happy Learning!</em></strong></p>]]></content><author><name>Manjushaps</name></author><category term="Git" /><summary type="html"><![CDATA[üöÄ From VCS to Git]]></summary></entry><entry><title type="html">Git Series: Part 2 - Remote repository - GitHub</title><link href="https://manjushaps.github.io/Techn0tz/git/2025/04/25/Git-Series-Part-2.html" rel="alternate" type="text/html" title="Git Series: Part 2 - Remote repository - GitHub" /><published>2025-04-25T00:00:00+05:30</published><updated>2025-04-25T00:00:00+05:30</updated><id>https://manjushaps.github.io/Techn0tz/git/2025/04/25/Git-Series-Part-2</id><content type="html" xml:base="https://manjushaps.github.io/Techn0tz/git/2025/04/25/Git-Series-Part-2.html"><![CDATA[<h2 id="-missed-part-1-">üîó Missed Part-1 ?</h2>
<p>üëâ Checkout <strong><a href="/Techn0tz/git/2025/04/25/Git-Series-Part-1">Git Series: Part1 - Local Version Control</a></strong> to get familiar with the basics of Git and how local version control works</p>

<hr />

<h1 id="Ô∏è-remote-repository">üó∫Ô∏è Remote Repository</h1>
<h2 id="-connecting-your-local-repository-to-github">üîÑ Connecting Your Local Repository to GitHub</h2>
<p>Once you‚Äôve committed your changes locally, the next step is to upload (push) your code to GitHub so it‚Äôs safely stored online and ready to share or collaborate</p>

<h2 id="-creating-a-new-repository-on-github">üÜï Creating a new repository on GitHub</h2>
<ul>
  <li>Go to <strong>https://github.com</strong></li>
  <li>Click on ‚ûï New repository</li>
  <li>Fill in:
    <ul>
      <li>Repository name (e.g., my-demo-project)</li>
      <li>Choose Public or Private</li>
      <li>DO NOT check ‚ÄúInitialize this repository with a README‚Äù (since you already have local files)</li>
    </ul>
  </li>
  <li>Click Create repository</li>
</ul>

<h2 id="-link-repo-to-github-and-pushing-to-remote-repository">üíª Link Repo to GitHub and pushing to remote repository</h2>

<ul>
  <li>Before pushing to GitHub, use <strong><code class="language-plaintext highlighter-rouge">git branch -M main</code></strong> command - to rename Git‚Äôs default branch <strong>master to main</strong>
    <ul>
      <li>Git defaults to master, but GitHub uses main, so renaming it helps avoid conflicts when pushing to GitHub.</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">git remote add origin https://github.com/your-username/my-demo-project.git</code></strong> command- Git adds a new connection to the remote repo
    <ul>
      <li><em>Replace URL with your actual repository URL</em></li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">git push -u origin main</code></strong> command - the changes that are committed locally are sent to the <em>main branch</em> of your GiHub‚Äôs repository
    <ul>
      <li>-u or ‚Äìset upstream is used only for initial push</li>
      <li>Next time when you want to push to same branch just use <em>git push</em></li>
    </ul>
  </li>
</ul>

<p>ü•á<strong>Now your code is live on GitHub! You can visit your repository URL to confirm</strong></p>

<hr />

<h1 id="Ô∏è-remote-repository-workflow">üñãÔ∏è Remote repository workflow</h1>

<p>After setting up your project with LVC,the remote repository workflow connects it to a remote server like GitHub for collaboration and version control</p>

<p><img src="/Techn0tz/assets/images/Remote_workflow.png" alt="Remote Workflow" width="500" height="auto" /></p>

<hr />

<h1 id="example-snapshot-pushing-git-project-to-github">üí°Example Snapshot: Pushing Git project to GitHub</h1>

<p>The first snapshot is from <strong>Part-1</strong>, given just for reference</p>

<p><img src="/Techn0tz/assets/images/LVC_snapshot.png" alt="LVC_example" /></p>

<p>continues below, complementing the remote repository snapshot for a complete view of the Git workflow.</p>

<p><img src="/Techn0tz/assets/images/Push_file_to_GitHub.png" alt="GitHub_example" /></p>

<p>The above snapshot visualizes the workflow involved in linking your local repository with a remote platform like GitHub, enabling version control beyond your machine.</p>

<h2 id="-result">‚úÖ Result</h2>
<p>üèÜ<strong><em>Go to your GitHub repo and you‚Äôll see hello.txt uploaded ‚Äî success!</em></strong></p>

<hr />

<h1 id="-full-git-journey-summary">üìë Full Git Journey Summary</h1>

<table>
  <thead>
    <tr>
      <th><strong>Step</strong></th>
      <th><strong>Action</strong></th>
      <th><strong>Command</strong></th>
      <th><strong>Stage</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Initialize Git</td>
      <td>git init</td>
      <td>Working Directory</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Create/edit files</td>
      <td>echo, touch, nano, etc.</td>
      <td>Working Directory</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Stage changes</td>
      <td>git add</td>
      <td>Staging Area</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Commit changes</td>
      <td>git commit -m ‚Äú‚Ä¶‚Äù</td>
      <td>Local Repository</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Create GitHub repo</td>
      <td>(via web browser)</td>
      <td>‚Äî</td>
    </tr>
    <tr>
      <td>6</td>
      <td>Link local repo to GitHub</td>
      <td>git remote add origin URL</td>
      <td>Remote Setup</td>
    </tr>
    <tr>
      <td>7</td>
      <td>Push to GitHub</td>
      <td>git push -u origin main</td>
      <td>Remote Repository</td>
    </tr>
  </tbody>
</table>

<hr />

<h1 id="-git-quick-fixes--what-it-says-vs-what-it-means">üîé Git Quick Fixes- What it says vs What it means</h1>

<table>
  <thead>
    <tr>
      <th><strong>Git Says</strong></th>
      <th><strong>What It Means</strong></th>
      <th><strong>What You Can Do</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>nothing to commit, working tree clean</td>
      <td>You‚Äôve staged and committed everything already</td>
      <td>You‚Äôre up to date! Keep working</td>
    </tr>
    <tr>
      <td>fatal: not a git repository</td>
      <td>You‚Äôre in a folder that isn‚Äôt initialized</td>
      <td>Run <em><code class="language-plaintext highlighter-rouge">git init</code></em> or go to the right folder</td>
    </tr>
    <tr>
      <td>no changes added to commit</td>
      <td>You changed files but didn‚Äôt stage them yet</td>
      <td>Run <em><code class="language-plaintext highlighter-rouge">git add filename</code></em></td>
    </tr>
    <tr>
      <td>Your branch is ahead of ‚Äòorigin/main‚Äô</td>
      <td>You have local commits not pushed to GitHub</td>
      <td>Run <em><code class="language-plaintext highlighter-rouge">git push</code></em></td>
    </tr>
    <tr>
      <td>error: failed to push some refs</td>
      <td>Usually a mismatch with GitHub (e.g., branch name)</td>
      <td>Run <em><code class="language-plaintext highlighter-rouge">git pull origin main --rebase</code></em>, then <em><code class="language-plaintext highlighter-rouge">git push</code></em></td>
    </tr>
    <tr>
      <td>merge conflict in filename</td>
      <td>Git found conflicting changes between branches</td>
      <td>Open the file, resolve conflicts, then <em><code class="language-plaintext highlighter-rouge">git add + git commit</code></em></td>
    </tr>
    <tr>
      <td>rejected - non-fast-forward</td>
      <td>Remote repo changed and your local copy is outdated</td>
      <td>Run <em><code class="language-plaintext highlighter-rouge">git pull</code></em> first, resolve conflicts, then push again</td>
    </tr>
    <tr>
      <td>fatal: remote origin already exists</td>
      <td>You‚Äôve already added a remote</td>
      <td>Run <em><code class="language-plaintext highlighter-rouge">git remote set-url origin &lt;url&gt;</code></em> to change it</td>
    </tr>
  </tbody>
</table>

<hr />

<h1 id="-conclusion">üìÉ Conclusion</h1>

<p>Understanding the Git workflow ‚Äî from your working directory to the remote repository ‚Äî is the foundation of effective version control.In this post we saw  how files move through Local version control to online using real commands, visuals, and hands-on examples.
Whether you‚Äôre working solo or collaborating with others, mastering these Git basics will help you track changes, avoid mistakes, and push your projects confidently to GitHub</p>

<hr />
<h2 id="-technuggetz---did-you-know">üí° TechNuggetz - Did you Know?</h2>

<blockquote>
  <p>üìá GitHub isn‚Äôt a centralized VCS ‚Äî it‚Äôs a remote platform where teams collaborate using Git. The version control stays distributed, even when using GitHub.</p>

  <p>‚≠ê The name GitHub comes from <strong>Git</strong> (the version control tool) + <strong>Hub</strong> (a central place where developers collaborate). It‚Äôs literally a hub for Git repositories!</p>

  <p>üí≠ Always run <strong><code class="language-plaintext highlighter-rouge">git pull</code></strong> before <strong><code class="language-plaintext highlighter-rouge">git push</code></strong> to avoid merge surprises when working in teams!</p>
</blockquote>

<hr />

<h2 id="--next-on-techn0tz">üîú  Next on Techn0tz..</h2>

<p><em>Git - Branching and Merging</em></p>]]></content><author><name>Manjushaps</name></author><category term="Git" /><summary type="html"><![CDATA[üîó Missed Part-1 ? üëâ Checkout Git Series: Part1 - Local Version Control to get familiar with the basics of Git and how local version control works]]></summary></entry><entry><title type="html">Version Control: The Backbone of Modern Development</title><link href="https://manjushaps.github.io/Techn0tz/vcs/and/dvcs/2025/04/18/vcs-cvcs-dvcs.html" rel="alternate" type="text/html" title="Version Control: The Backbone of Modern Development" /><published>2025-04-18T00:00:00+05:30</published><updated>2025-04-18T00:00:00+05:30</updated><id>https://manjushaps.github.io/Techn0tz/vcs/and/dvcs/2025/04/18/vcs-cvcs-dvcs</id><content type="html" xml:base="https://manjushaps.github.io/Techn0tz/vcs/and/dvcs/2025/04/18/vcs-cvcs-dvcs.html"><![CDATA[<p>In the fast-paced world of software development, change is constant. Developers write, rewrite, test, and refine code every day. Without a system to manage those changes, projects would quickly become chaotic. That‚Äôs where <strong>Version Control Systems (VCS)</strong> come in.</p>

<p>This post explains the basics of VCS, differences between <strong>Centralized</strong> and <strong>Distributed</strong> systems</p>

<hr />

<h1 id="-what-is-version-control-system">üßæ What is Version Control System?</h1>

<p>A <strong>Version Control System (VCS)</strong> is a tool that helps developers <strong>track changes in code</strong>, <strong>collaborate effectively</strong>, <strong>experiment safely using branches</strong>, and <strong>revert to previous versions</strong> if something goes wrong.</p>

<h2 id="Ô∏è-imagine-youre-part-of-a-high-profile-investigation">üïµÔ∏è Imagine you‚Äôre part of a high-profile investigation‚Ä¶</h2>

<p>Every document related to the investigation ‚Äî updates, evidence, and changes ‚Äî is crucial and must be recorded in a <strong>master case file</strong>. This file evolves over time and needs to be updated consistently throughout the process.</p>

<p>That‚Äôs exactly what a <strong>Version Control System (VCS)</strong> does in software development.</p>

<p>It records detailed notes, timestamps, author information, and every change made ‚Äî allowing you to go back to any previous version when needed. It also enables <strong>multiple detectives (developers)</strong> to collaborate on the same case without overwriting each other‚Äôs work.</p>

<hr />

<h1 id="Ô∏è-centralized-version-control-cvcs">üóÇÔ∏è Centralized Version Control (CVCS)</h1>

<p>In a <strong>Centralized Version Control System</strong>, there is one single <strong>central repository</strong> where all versions of code are stored. Developers connect to this central server to get the latest version of the code or to make updates.</p>

<p>‚úÖ Advantages:</p>
<ul>
  <li>Simple and easy to set up</li>
  <li>Everyone works on the same central version</li>
</ul>

<p>‚ö†Ô∏è Disadvantages:</p>
<ul>
  <li>Requires constant internet connection</li>
  <li>If the central server fails, you lose access to everything</li>
</ul>

<p><strong>Examples</strong>: SVN (Subversion), CVS</p>

<hr />

<h1 id="-decentralized-version-control-dvcs">üîÑ Decentralized Version Control (DVCS)</h1>

<p>In a <strong>Distributed Version Control System</strong>, every developer has a <strong>complete copy of the codebase</strong>, including its full history. This allows for better collaboration, offline access, and safer experimentation.</p>

<p>‚úÖ Advantages:</p>
<ul>
  <li>Work offline with full project history</li>
  <li>Fast operations (commits,merges)</li>
  <li>No single point of failure</li>
</ul>

<p>‚ö†Ô∏è Disadvantages:</p>
<ul>
  <li>More complex branching/merging (initially)</li>
</ul>

<p><strong>Examples</strong>: Git, Mercurial</p>

<hr />

<h1 id="-summary">üìÑ Summary</h1>

<table>
  <thead>
    <tr>
      <th><strong>Feature</strong></th>
      <th><strong>CVCS</strong></th>
      <th><strong>DVCS</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Central Repository</td>
      <td>Yes</td>
      <td>No</td>
    </tr>
    <tr>
      <td>Full History Locally</td>
      <td>No</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Offline Work</td>
      <td>Limited</td>
      <td>Fully Supported</td>
    </tr>
    <tr>
      <td>Collaboration Model</td>
      <td>Linear, centralized</td>
      <td>Distributed, flexible</td>
    </tr>
    <tr>
      <td>Examples</td>
      <td>SVN, CVS</td>
      <td>Git, Mercurial</td>
    </tr>
  </tbody>
</table>

<hr />

<blockquote>
  <h2 id="-technuggetz----did-you-know">üì¶ <strong>TechNuggetz</strong> - üìÜ <strong>Did you know?</strong></h2>

  <p>üß† <strong><em>Version Control</em></strong> dates back to the 1970s ‚Äî with <strong>RCS</strong> and <strong>SCCS</strong>!</p>

  <p>‚òÅÔ∏è In the <strong><em>Centralized Version Control</em></strong>, the server is the boss - if it goes down, no server, no service! <em>Time for a coffee!</em>‚òï</p>

  <p>üåè <strong>Distributed VCS</strong> like Git gives each developer a full copy of the repository ‚Äî work offline, experiment freely, and break stuff without fear!</p>
</blockquote>

<hr />

<blockquote>
  <h2 id="-next-on-techn0tz">üîú <strong>Next on Techn0tz</strong></h2>

  <p>üõ∏ <strong>Git</strong> - commands and workflows</p>
</blockquote>]]></content><author><name>Manjushaps</name></author><category term="VCS" /><category term="and" /><category term="DVCS" /><summary type="html"><![CDATA[In the fast-paced world of software development, change is constant. Developers write, rewrite, test, and refine code every day. Without a system to manage those changes, projects would quickly become chaotic. That‚Äôs where Version Control Systems (VCS) come in.]]></summary></entry></feed>