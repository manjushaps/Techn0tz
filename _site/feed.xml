<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/Techn0tz/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/Techn0tz/" rel="alternate" type="text/html" /><updated>2025-04-27T11:16:31+05:30</updated><id>http://localhost:4000/Techn0tz/feed.xml</id><title type="html">Techn0tz</title><entry><title type="html">Git Series: Part 2 - Remote repository - GitHub</title><link href="http://localhost:4000/Techn0tz/git/2025/04/25/Git-Series-Part-2.html" rel="alternate" type="text/html" title="Git Series: Part 2 - Remote repository - GitHub" /><published>2025-04-25T00:00:00+05:30</published><updated>2025-04-25T00:00:00+05:30</updated><id>http://localhost:4000/Techn0tz/git/2025/04/25/Git-Series-Part-2</id><content type="html" xml:base="http://localhost:4000/Techn0tz/git/2025/04/25/Git-Series-Part-2.html"><![CDATA[<h2 id="-missed-part-1-">🔗 Missed Part-1 ?</h2>
<p>👉 Checkout <a href="/Techn0tz/git/2025/04/25/Git-Series-Part-1">Git Series: Part1 - Local Version Control</a> to get familiar with the basics of Git and how local version control works</p>

<hr />
<h1 id="️-remote-repository">🗺️ Remote Repository</h1>
<h2 id="-connecting-your-local-repository-to-github">🔄 Connecting Your Local Repository to GitHub</h2>
<p>Once you’ve committed your changes locally, the next step is to upload (push) your code to GitHub so it’s safely stored online and ready to share or collaborate</p>

<h2 id="-creating-a-new-repository-on-github">🆕 Creating a new repository on GitHub</h2>
<ul>
  <li>Go to <strong>https://github.com</strong></li>
  <li>Click on ➕ New repository</li>
  <li>Fill in:
    <ul>
      <li>Repository name (e.g., my-demo-project)</li>
      <li>Choose Public or Private</li>
      <li>DO NOT check “Initialize this repository with a README” (since you already have local files)</li>
    </ul>
  </li>
  <li>Click Create repository</li>
</ul>

<h2 id="-link-repo-to-github-and-pushing-to-remote-repository">💻 Link Repo to GitHub and pushing to remote repository</h2>

<ul>
  <li>Before pushing to GitHub, use <strong><code class="language-plaintext highlighter-rouge">git branch -M main</code></strong> command - to rename Git’s default branch <strong>master to main</strong>
    <ul>
      <li>Git defaults to master, but GitHub uses main, so renaming it helps avoid conflicts when pushing to GitHub.</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">git remote add origin https://github.com/your-username/my-demo-project.git</code></strong> command- Git adds a new connection to the remote repo
    <ul>
      <li><em>Replace URL with your actual repository URL</em></li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">git push -u origin main</code></strong> command - the changes that are committed locally are sent to the <em>main branch</em> of your GiHub’s repository
    <ul>
      <li>-u or –set upstream is used only for initial push</li>
      <li>Next time when you want to push to same branch just use <em>git push</em></li>
    </ul>
  </li>
</ul>

<p>🥇<strong>Now your code is live on GitHub! You can visit your repository URL to confirm</strong></p>

<hr />
<h1 id="️-remote-repository-workflow">🖋️ Remote repository workflow</h1>

<p>After setting up your project with LVC,the remote repository workflow connects it to a remote server like GitHub for collaboration and version control</p>

<p><img src="/Techn0tz/assets/images/Remote_workflow.png" alt="Remote Workflow" width="500" height="auto" /></p>

<hr />
<h1 id="example-snapshot-pushing-git-project-to-github">💡Example Snapshot: Pushing Git project to GitHub</h1>

<p>The first snapshot is from <strong>Part-1</strong>, given just for reference</p>

<p><img src="/Techn0tz/assets/images/LVC_snapshot.png" alt="LVC_example" /></p>

<p>continues below, complementing the remote repository snapshot for a complete view of the Git workflow.</p>

<p><img src="/Techn0tz/assets/images/Push_file_to_GitHub.png" alt="GitHub_example" /></p>

<p>The above snapshot visualizes the workflow involved in linking your local repository with a remote platform like GitHub, enabling version control beyond your machine.</p>

<h2 id="-result">✅ Result</h2>
<p>🏆<strong><em>Go to your GitHub repo and you’ll see hello.txt uploaded — success!</em></strong></p>

<hr />
<h1 id="-full-git-journey-summary">📑 Full Git Journey Summary</h1>

<table>
  <thead>
    <tr>
      <th><strong>Step</strong></th>
      <th><strong>Action</strong></th>
      <th><strong>Command</strong></th>
      <th><strong>Stage</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Initialize Git</td>
      <td>git init</td>
      <td>Working Directory</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Create/edit files</td>
      <td>echo, touch, nano, etc.</td>
      <td>Working Directory</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Stage changes</td>
      <td>git add</td>
      <td>Staging Area</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Commit changes</td>
      <td>git commit -m “…”</td>
      <td>Local Repository</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Create GitHub repo</td>
      <td>(via web browser)</td>
      <td>—</td>
    </tr>
    <tr>
      <td>6</td>
      <td>Link local repo to GitHub</td>
      <td>git remote add origin URL</td>
      <td>Remote Setup</td>
    </tr>
    <tr>
      <td>7</td>
      <td>Push to GitHub</td>
      <td>git push -u origin main</td>
      <td>Remote Repository</td>
    </tr>
  </tbody>
</table>

<hr />
<h1 id="-git-quick-fixes--what-it-says-vs-what-it-means">🔎 Git Quick Fixes- What it says vs What it means</h1>

<table>
  <thead>
    <tr>
      <th><strong>Git Says</strong></th>
      <th><strong>What It Means</strong></th>
      <th><strong>What You Can Do</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>nothing to commit, working tree clean</td>
      <td>You’ve staged and committed everything already</td>
      <td>You’re up to date! Keep working</td>
    </tr>
    <tr>
      <td>fatal: not a git repository</td>
      <td>You’re in a folder that isn’t initialized</td>
      <td>Run <em><code class="language-plaintext highlighter-rouge">git init</code></em> or go to the right folder</td>
    </tr>
    <tr>
      <td>no changes added to commit</td>
      <td>You changed files but didn’t stage them yet</td>
      <td>Run <em><code class="language-plaintext highlighter-rouge">git add filename</code></em></td>
    </tr>
    <tr>
      <td>Your branch is ahead of ‘origin/main’</td>
      <td>You have local commits not pushed to GitHub</td>
      <td>Run <em><code class="language-plaintext highlighter-rouge">git push</code></em></td>
    </tr>
    <tr>
      <td>error: failed to push some refs</td>
      <td>Usually a mismatch with GitHub (e.g., branch name)</td>
      <td>Run <em><code class="language-plaintext highlighter-rouge">git pull origin main --rebase</code></em>, then <em><code class="language-plaintext highlighter-rouge">git push</code></em></td>
    </tr>
    <tr>
      <td>merge conflict in filename</td>
      <td>Git found conflicting changes between branches</td>
      <td>Open the file, resolve conflicts, then <em><code class="language-plaintext highlighter-rouge">git add + git commit</code></em></td>
    </tr>
    <tr>
      <td>rejected - non-fast-forward</td>
      <td>Remote repo changed and your local copy is outdated</td>
      <td>Run <em><code class="language-plaintext highlighter-rouge">git pull</code></em> first, resolve conflicts, then push again</td>
    </tr>
    <tr>
      <td>fatal: remote origin already exists</td>
      <td>You’ve already added a remote</td>
      <td>Run <em><code class="language-plaintext highlighter-rouge">git remote set-url origin &lt;url&gt;</code></em> to change it</td>
    </tr>
  </tbody>
</table>

<hr />
<h1 id="-conclusion">📃 Conclusion</h1>

<p>Understanding the Git workflow — from your working directory to the remote repository — is the foundation of effective version control.In this post we saw  how files move through Local version control to online using real commands, visuals, and hands-on examples.
Whether you’re working solo or collaborating with others, mastering these Git basics will help you track changes, avoid mistakes, and push your projects confidently to GitHub</p>

<hr />
<h2 id="-technuggetz---did-you-know">💡 TechNuggetz - Did you Know?</h2>

<blockquote>
  <p>📇 GitHub isn’t a centralized VCS — it’s a remote platform where teams collaborate using Git. The version control stays distributed, even when using GitHub.</p>

  <p>⭐ The name GitHub comes from <strong>Git</strong> (the version control tool) + <strong>Hub</strong> (a central place where developers collaborate). It’s literally a hub for Git repositories!</p>

  <p>💭 Always run <strong><code class="language-plaintext highlighter-rouge">git pull</code></strong> before <strong><code class="language-plaintext highlighter-rouge">git push</code></strong> to avoid merge surprises when working in teams!</p>
</blockquote>

<hr />
<h2 id="--next-on-techn0tz">🔜  Next on Techn0tz..</h2>

<p><em>Git - Branching and Merging</em></p>]]></content><author><name></name></author><category term="Git" /><summary type="html"><![CDATA[🔗 Missed Part-1 ? 👉 Checkout Git Series: Part1 - Local Version Control to get familiar with the basics of Git and how local version control works]]></summary></entry><entry><title type="html">Git Series: Part 1 - Local Version Control</title><link href="http://localhost:4000/Techn0tz/git/2025/04/25/Git-Series-Part-1.html" rel="alternate" type="text/html" title="Git Series: Part 1 - Local Version Control" /><published>2025-04-25T00:00:00+05:30</published><updated>2025-04-25T00:00:00+05:30</updated><id>http://localhost:4000/Techn0tz/git/2025/04/25/Git-Series-Part-1</id><content type="html" xml:base="http://localhost:4000/Techn0tz/git/2025/04/25/Git-Series-Part-1.html"><![CDATA[<h1 id="-from-vcs-to-git">🚀 From VCS to Git</h1>

<p>In the last post, we explored Version Control System and their types — CVCS and DVCS. Now, let’s zoom into the most popular DVCS tool in the world: <strong>Git</strong> — and see how it powers modern development.</p>

<hr />
<h1 id="-what-is-git">📜 What is Git?</h1>

<p>Git is open source Distributed Version Control Sytem which allows developers</p>
<ul>
  <li>Track changes in code over time</li>
  <li>Collaborate seamlessly with teammates</li>
  <li>Create branches for experimental study</li>
  <li>Roll back to previous versions when things goes wrong</li>
</ul>

<blockquote>
  <p>⌛Think of Git as your <strong>projects time machine</strong> - but smarter, faster and made for team work</p>
</blockquote>

<hr />
<h1 id="-core-components-git-and-lvc-worflow">🎯 Core Components Git and LVC worflow</h1>

<p>The Git workflow is a step-by-step process that defines how changes in a project move from your local machine to a shared, remote repository like GitHub. Mastering this flow helps you collaborate smoothly and  manage versions efficiently.</p>

<p><strong>This post explains about Git basics and how the files are committed locally</strong></p>

<p>The core components of LVC worflow are: <strong>Working Directory, Staging Area, Local Repository</strong>. Understanding how files move through these stages are essential.</p>

<p><img src="/Techn0tz/assets/images/LVC_workflow.png" alt="LVC Workflow" width="500" height="auto" /></p>

<p>The diagram above outlines the LVC process. Now, let’s explore each stage and see how your local project files eventually become committed, shared history.</p>

<h2 id="-working-directory">📂 Working Directory</h2>

<p>This is the local folder on your computer where you edit and work on your project files</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">git init</code></strong> command - Intializes a Git repository
    <ul>
      <li>The Git starts tracking the specified folder as a Git project- in other words, your plain folder(working directory) is converted into .Git project</li>
      <li>Creates a hidden <strong>.git.</strong> folder in the working directory</li>
      <li>This .git/  folder contains everything that Git needs to track your project (eg. commit, branch, logs etc)</li>
      <li>Your <strong>working directory stays the same</strong>, but now Git is watching for changes</li>
    </ul>
  </li>
</ul>

<h2 id="️-staging-area">🗃️ Staging Area</h2>

<p>The staging area (index) is like a holding zone- where Git gathers all the changes that you want to commit</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">git add</code></strong> command - moves the changes from working directory to the staging area
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">git add filename</code></strong> - Adds a specific file to the staging area</li>
      <li><strong><code class="language-plaintext highlighter-rouge">git add .</code></strong> - Adds all the modified files in the folder</li>
    </ul>
  </li>
</ul>

<h2 id="-local-repository">📁 Local Repository</h2>

<p>The local repository is the <strong>.git directory</strong>- which is the Git’s repository storage</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git commit</code> command - the changes from the staging area are permanently stored in the repository
    <ul>
      <li>The repository is located inside the hidden <strong>.git/</strong> folder- the one created by <strong><code class="language-plaintext highlighter-rouge">git init</code></strong></li>
      <li>The .git directory contains all the commits, project history, branches, logs etc</li>
    </ul>
  </li>
</ul>

<h1 id="example-snapshot-from-init-to-commit-in-lvc">💡Example Snapshot: From init to commit in LVC</h1>

<p>The snapshot below provides a practical example of how to create a new directory, initialize a Git repository, and set up local version control. It will walk you through the essential steps, including adding files to the staging area, committing changes, and managing version history on your local machine. By following along, you’ll gain hands-on experience in using Git for efficient source code management.</p>

<p><img src="/Techn0tz/assets/images/LVC_snapshot.png" alt="LVC_example" /></p>

<hr />
<h2 id="-technuggetz---did-you-know">🧠 TechNuggetz - Did you Know?</h2>

<blockquote>
  <p>⌛ <strong>Git</strong> was built by <strong>Linus Torvalds - Founder of Linus</strong> in just 2 weeks in 2005 - Iconic!</p>

  <p>☑️ <strong>Git</strong> knows everything locally, it dosen’t need internet to track changes - from version history, staging and committing - everithing happens in your local machine.</p>

  <p>❌ Made a mistake? <strong><code class="language-plaintext highlighter-rouge">git checkout -- filename</code></strong> - restores a file to its last committed state</p>

  <p>🗂️ Track only what matters! Use a <strong><code class="language-plaintext highlighter-rouge">.gitignore</code></strong> file to prevent sensitive data (like passwords, logs, or config files) from slipping into your commits. A cleaner repo is a safer repo!</p>

  <p>🪄 Autosave magic! Use <strong><code class="language-plaintext highlighter-rouge">git stash</code></strong> to save your work-in-progress without a commit. Come back later with <strong><code class="language-plaintext highlighter-rouge">git stash pop</code></strong> and pick up right where you left off!</p>
</blockquote>

<p>Continue.. 👉 To push your Git project to Remote repository like GitHub <a href="/Techn0tz/git/2025/04/25/Git-Series-Part-2">Part-2:Remote-repository</a></p>

<p><strong><em>Happy Learning!</em></strong></p>]]></content><author><name></name></author><category term="Git" /><summary type="html"><![CDATA[🚀 From VCS to Git]]></summary></entry><entry><title type="html">Version Control: The Backbone of Modern Development</title><link href="http://localhost:4000/Techn0tz/vcs/and/dvcs/2025/04/18/vcs-cvcs-dvcs.html" rel="alternate" type="text/html" title="Version Control: The Backbone of Modern Development" /><published>2025-04-18T00:00:00+05:30</published><updated>2025-04-18T00:00:00+05:30</updated><id>http://localhost:4000/Techn0tz/vcs/and/dvcs/2025/04/18/vcs-cvcs-dvcs</id><content type="html" xml:base="http://localhost:4000/Techn0tz/vcs/and/dvcs/2025/04/18/vcs-cvcs-dvcs.html"><![CDATA[<p>In the fast-paced world of software development, change is constant. Developers write, rewrite, test, and refine code every day. Without a system to manage those changes, projects would quickly become chaotic. That’s where <strong>Version Control Systems (VCS)</strong> come in.</p>

<p>This post explains the basics of VCS, differences between <strong>Centralized</strong> and <strong>Distributed</strong> systems</p>

<hr />

<h1 id="-what-is-version-control-system">🧾 What is Version Control System?</h1>

<p>A <strong>Version Control System (VCS)</strong> is a tool that helps developers <strong>track changes in code</strong>, <strong>collaborate effectively</strong>, <strong>experiment safely using branches</strong>, and <strong>revert to previous versions</strong> if something goes wrong.</p>

<h2 id="️-imagine-youre-part-of-a-high-profile-investigation">🕵️ Imagine you’re part of a high-profile investigation…</h2>

<p>Every document related to the investigation — updates, evidence, and changes — is crucial and must be recorded in a <strong>master case file</strong>. This file evolves over time and needs to be updated consistently throughout the process.</p>

<p>That’s exactly what a <strong>Version Control System (VCS)</strong> does in software development.</p>

<p>It records detailed notes, timestamps, author information, and every change made — allowing you to go back to any previous version when needed. It also enables <strong>multiple detectives (developers)</strong> to collaborate on the same case without overwriting each other’s work.</p>

<hr />

<h1 id="️-centralized-version-control-cvcs">🗂️ Centralized Version Control (CVCS)</h1>

<p>In a <strong>Centralized Version Control System</strong>, there is one single <strong>central repository</strong> where all versions of code are stored. Developers connect to this central server to get the latest version of the code or to make updates.</p>

<p>✅ Advantages:</p>
<ul>
  <li>Simple and easy to set up</li>
  <li>Everyone works on the same central version</li>
</ul>

<p>⚠️ Disadvantages:</p>
<ul>
  <li>Requires constant internet connection</li>
  <li>If the central server fails, you lose access to everything</li>
</ul>

<p><strong>Examples</strong>: SVN (Subversion), CVS</p>

<hr />

<h1 id="-decentralized-version-control-dvcs">🔄 Decentralized Version Control (DVCS)</h1>

<p>In a <strong>Distributed Version Control System</strong>, every developer has a <strong>complete copy of the codebase</strong>, including its full history. This allows for better collaboration, offline access, and safer experimentation.</p>

<p>✅ Advantages:</p>
<ul>
  <li>Work offline with full project history</li>
  <li>Fast operations (commits,merges)</li>
  <li>No single point of failure</li>
</ul>

<p>⚠️ Disadvantages:</p>
<ul>
  <li>More complex branching/merging (initially)</li>
</ul>

<p><strong>Examples</strong>: Git, Mercurial</p>

<hr />

<h1 id="-summary">📄 Summary</h1>

<table>
  <thead>
    <tr>
      <th><strong>Feature</strong></th>
      <th><strong>CVCS</strong></th>
      <th><strong>DVCS</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Central Repository</td>
      <td>Yes</td>
      <td>No</td>
    </tr>
    <tr>
      <td>Full History Locally</td>
      <td>No</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Offline Work</td>
      <td>Limited</td>
      <td>Fully Supported</td>
    </tr>
    <tr>
      <td>Collaboration Model</td>
      <td>Linear, centralized</td>
      <td>Distributed, flexible</td>
    </tr>
    <tr>
      <td>Examples</td>
      <td>SVN, CVS</td>
      <td>Git, Mercurial</td>
    </tr>
  </tbody>
</table>

<hr />

<blockquote>
  <h2 id="-technuggetz----did-you-know">📦 <strong>TechNuggetz</strong> - 📆 <strong>Did you know?</strong></h2>

  <p>🧠 <strong><em>Version Control</em></strong> dates back to the 1970s — with <strong>RCS</strong> and <strong>SCCS</strong>!</p>

  <p>☁️ In the <strong><em>Centralized Version Control</em></strong>, the server is the boss - if it goes down, no server, no service! <em>Time for a coffee!</em>☕</p>

  <p>🌏 <strong>Distributed VCS</strong> like Git gives each developer a full copy of the repository — work offline, experiment freely, and break stuff without fear!</p>
</blockquote>

<hr />

<blockquote>
  <h2 id="-next-on-techn0tz">🔜 <strong>Next on Techn0tz</strong></h2>

  <p>🛸 <strong>Git</strong> - commands and workflows</p>
</blockquote>]]></content><author><name></name></author><category term="VCS" /><category term="and" /><category term="DVCS" /><summary type="html"><![CDATA[In the fast-paced world of software development, change is constant. Developers write, rewrite, test, and refine code every day. Without a system to manage those changes, projects would quickly become chaotic. That’s where Version Control Systems (VCS) come in.]]></summary></entry></feed>